[title sub="Written by Chris Graham (ocProducts)"]Composr Tutorial: WYSIWYG editing[/title]

Composr "Long text" Comcode content is, by default, edited using a WYSIWYG editor. This tutorial provides some guidance on the WYSIWYG editor, including advanced information for those wanting to push it to the limit.

[contents]decimal,lower-alpha[/contents]

[title="2"]WYSIWYG editors on the web[/title]

A WYSIWYG (What You See Is What You Get) editor is a document editor where the editor's editing interface roughly mirrors the appearance of the final document. Web sites deploy WYSIWYG editors via a combination of JavaScript and built-in editing features that are present in some of the popular modern web browsers. Online WYSIWYG editors are HTML editors: the document created is manipulated and transmitted as HTML.

[title="2"]Integrated editor[/title]

The Composr WYSIWYG editor is CKEditor.

[i]For programmers[/i]: Composr can, in principle, support almost any WYSIWYG editor component. Composr binds itself to the editor via JavaScript code stored in Composr's [tt]WYSIWYG_LOAD.tpl[/tt], [tt]WYSIWYG_SETTINGS.tpl[/tt], and [tt]posting.js[/tt] templates. The editor itself is stored in [tt]data/ckeditor[/tt].

[title="2"]Highlighting of Comcode tags[/title]

Comcode tags that can not be represented visually in the editor will be shown either as:
1) raw Comcode, and highlighted with a yellow background;
2) a button that you can click to edit the parameters there-of (usually for tags that insert something, rather than being markup), with preview tooltips
3) As a fake XML tag in the editor, with the Comcode tag name highlighted

If you put the mouse over the Comcode you will see a tooltip showing how it looks (shown in the bottom-right of the browser window).

Do not worry if this yellow background spreads around (this can happen if you type in certain places) -- it will be stripped when you save.

[title="2"]Staff editor[/title]

By default, certain WYSIWYG features will only be given to staff users. This is because we generally want to show a simpler editor to regular users.

If you want to change it you can customise the [tt]WYSIWYG_SETTINGS[/tt] template. For example, changing the second line of that template to var [tt]precision_editing=true;[/tt] would force the full editor to be available for everybody.

[title="2"]The clipboard (copy & paste)[/title]

Operating systems (such as Windows) hold different kinds of data in the clipboard. Often when you copy something it will be held in multiple formats.
For our purposes, consider the following kinds of data and how they are handled by CKEditor (actually by the web browser itself, CKEditor has no direct control over it):
1) Plain text -- pasted exactly
2) Rich text (e.g. from Microsoft Word) -- converts to HTML, often has some loss
3) HTML -- pastes exactly, but when put into the clipboard it usually is simplified and made standalone (e.g. CSS class references are replaced with inline styles)
4) Files -- just pastes the filename; except in Firefox, which will paste image contents if it is an image (see below)
5) Images -- pastes the image in inline, but may not work in all browsers (confirmed working in Firefox and Chrome and IE11 -- not working in Safari and older versions of IE)
6) Spreadsheet cells -- typically pastes a raw table with no special formatting

It is worth noting that for copy & paste to work, the following are all involved (in order):
1) Source application (e.g. web browser): takes the data and puts it into the clipboard, potentially in multiple formats (e.g. plain text, rich text, and HTML)
2) Operating system: manages the clipboard system
3) Web browser: takes the most appropriate supported data format, and feeds it through as HTML
4) WYSIWYG editor (Ckeditor): takes/holds the HTML, and potentially manipulates it a bit

Different operating systems, source applications, and web browsers, may lead to inconsistencies in how copy & paste operations are handled.

You will notice when you press the paste button from the WYSIWYG toolbar, it makes you paste using a keypress. This is because the web browser won't allow the editor's JavaScript code to directly access the clipboard -- for security reasons.
If you directly use the keypress to paste this is not an issue. However it is better to paste via the paste button as it has special provisions for cleaning up the pasted data. For example, it will allow spreadsheet data to come through correctly.

Sometimes you will want to paste plain text into the editor, which is a problem when the browser puts priority on pasting rich text / HTML versions. A novice user might not even understand why peripheral styles have come along with what they pasted.
You can solve this a number of ways...
1) Manually type rather than using copy & paste
2) Copy & paste into Windows notepad (or equivalent, e.g. TextEdit on a Mac), then copy out of Windows notepad, then paste into the editor
3) Turn off WYSIWYG
4) Use the "Paste as plain text" button in the WYSIWYG editor
The final option is usually the most sensible one, but for the sake of throughness, I wanted to expound on different approaches users take.

[title="2"]Embedding files[/title]

There are currently 5 ways to get images (and other files) into the WYSIWYG editor:
1) Attachments
2) URLs
3) Pasting within HTML (typically will lead to embedded URLs)
4) Pasting within rich text (typically will lead to "base64" embedded images, which Composr will turn into inline attachments)
5) Drag and drop (this may be sporadic, JavaScript support for this is very new and prone to a variety of bugs, as a lot of cutting-edge browser subsystems are involved)
6) (We may later implement support for direct pasting of raw image data)

[title="3"]Attachments[/title]

Composr has its own system for making attachments. If the WYSIWYG editor is for a 'Post area' then there will be an attachment facility beneath it. Files may be chosen using this attachment facility, and when this is done, a marker will be placed into the editor. The marker looks something like:
[code]
[attachment]new_1[/attachment]
[/code]

You may move this marker around by cutting and pasting it -- placing it anywhere you desire within the editor.

You may also choose the attachment display method using a drop-down list near to where you chose the file. There are options there to 'float' the attachment, or to display it as an inline image, amongst others.

[title="3"]URLs: Referencing uploaded images[/title]

Another way to embed images is to use the image icon that exists within the WYSIWYG editor (or manually via the Comcode 'img' tag if you prefer).
With this, you may reference any image that already exists on the web, via URL.

The drawback with this is that the file must already exist, and be stored outside of the context of the Composr website that it is being referenced on.

However, one handy convention for Composr website administrators, is to upload the file to the [tt]uploads/website_specific[/tt] directory using FTP, and then referencing the image from there. This pre-created directory is designed for storing this kind of file, and will help you keep things tidy. As long as you backup this directory with the rest of your website, the URLs should not break.

We go to specific measures to make sure that URLs are defined relative to the website's base URL, regardless of where the editor is running from.
This is really important for content portabiltity. We then actually save using absolute URLs (i.e. we include the domain name etc).

[title="2"]Manually editing HTML source[/title]

Toward the top-left of the editor is a button to toggle HTML source view in the editor. When in HTML source view, you may manually enter and edit the HTML that will be used. This is useful:
 - in circumstances where things have not pasted into the editor as you expected
 - when you have some specific HTML in mind that is hard to re-create visually, such as HTML involving JavaScript (note that only super-administrators may input JavaScript)

[title="2"]HTML filtering[/title]

Composr does not accept the HTML from the WYSIWYG editor directly as input for Composr content. This is for three reasons:
 - This poses a severe security risk
 - The HTML generates via WYSIWYG is often a mess
 - Composr rich content is defined in Comcode, not HTML

[title="3"]Security filtering[/title]

HTML acts as a container for numerous technologies, including CSS and JavaScript. JavaScript can be used as a vehicle for attacking websites via a technique called 'XSS' (Cross Site Scripting). Basically an XSS attack can be used to steal logins; it works by a user submitting content that includes malicious JavaScript code that causes hijacking of the web browser of the viewer of the said-content. This is a major issue, and means that Composr has to go to great lengths to protect against it.

The HTML is treated to one of two possible security filters, depending on circumstances:
 - The white-list filter (more finicky)
 - The black-list filter (more liberal)
 - ([i]super-administrators are not subject to any filter[/i])

The white-list filter is subjected to those users who do not have the "Use Dangerous Comcode" permission, and blocks any HTML that is not known as safe. Users subjected to the white-list filter will find that some complex formatting may be lost.

The black-list filter is subjected to the users who do have the "Subject to a more liberal HTML filter" permission, and will go to great lengths to try and strip any JavaScript from the HTML. There are no known problems with the black-list filter, but ocProducts can not accept any liability for the consequences of using it (although we have gone to great lengths to make the black-list filter very safe).

[title="3"]Cleanup[/title]

The HTML that comes from directly from the WYSIWYG editor is often very messy for a number of reasons:
 - If it was created via pasting from Microsoft Word, there is a high likelihood that it contains great amounts of superfluous code
 - The process of visual editing itself often results in code complexity, as formatting changes are often made that override existing formatting, yet leave both sets of formatting code in-place.
Messiness presents numerous problems:
 - Slow-down on the server
 - Extra bandwidth usage
 - Bad "semantics" (difficulties for users of screen readers)
 - Challenges for anyone hand-editing the code

In addition, Composr works via XHTML5, not HTML5; for the cases where HTML and XHTML are non-equivalent, it is best that Composr clean things up.

[title="4"]Within the editor[/title]

The remove styles button in the editor is very useful for removing junk styles.

Additionally, the source-code view can be used to manually clean things up.

[title="4"]Comcode conversion[/title]

It is the view of ocProducts that, where possible, content should be able to be hand-edited, and usable in different contexts (e.g. on mobile phones as well as on the web).

You may choose to enable the Comcode conversion configuration option if you wish, but honestly we no longer like or recommend this option, as it can mangle any non-trivial styling. The rest of this section applies only if conversion is enabled...

Composr will thus go to great efforts to turn complex HTML into equivalent simple Comcode, where possibly fully eliminating all direct usage of HTML.

Where HTML cannot be fully eliminated, Composr will encapsulate it with Comcode 'semihtml' tags, within the wider Comcode.

Sometimes the Comcode conversion is imperfect. For example, line breaks can be introduced, or some custom formatting can be lost.

If you do not want Comcode conversion, you can disable the Composr "Convert XHTML to Comcode" configuration option or include this hint in your content:
[codebox]
{$,page hint: no_smart_conversion}
[/codebox]

[title="2"]Problem areas, and turning the editor off[/title]

Sometimes WYSIWYG editing is more trouble than it's worth. When particularly complex layouts are produced, or code pasted from documents, it can still result messy and slow code; especially when content is long. This is particularly bad for web-sites that favour very high web standards (such as perfect WCAG accessibility), which will always need to have a degree of hand-coding in them, to maintain those high standards.
Generally it's also not a good idea to have anything that is not directly WYSIWYG in the WYSIWYG editor, including careful use of tags to apply custom CSS styles, or JavaScript. Various things can relate to it getting stripped or corrupted.
For these situations it is best to simply turn the WYSIWYG editor off. You can do this on a per document basis by pasting this bit into your code:
[code]
{$,page hint: no_wysiwyg}
[/code]
If you turn off the WYSIWYG editor when editing something, Composr may actually add this automatically. You may notice then that the enable/disable button disappears from alongside that field. This is to stop other content editors going in, and then accidentally corrupting carefully constructed Comcode via WYSIWYG.

[title="2"]CKEditor skins[/title]

We bundle 3 skins that we like:
1) kama
2) moono (the default)
3) moonocolor

To change skins you need to edit the [tt]WYSIWYG_SETTINGS.js[/tt] template. Change the skin name in the obvious place.

If you want to download other CKEditor skins and place them in [tt]data/ckeditor/skins/[/tt] there's nothing stopping you. That said, we test/optimise for the above skins only (including having different icons for our custom plugins for the different skins, defined in [tt]forms.css[/tt]).

[concepts
 1_key="WYSIWYG"     1_value="What You See Is What You Get; the term for document editors where the editor's editing interface mirrors the appearance of the final document."
 2_key="RTF"         2_value="Rich Text Format; the format used by Microsoft Windows for transferring formatted clipboard data."
 3_key="CKEditor"    3_value="The WYSIWYG editor that Composr uses"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_comcode"]Comcode and the attachment system[/page]

{$SET,tutorial_tags,Content,core_rich_media,regular}{$SET,tutorial_add_date,Aug 2008}{$SET,tutorial_summary,This tutorial provides some advanced information on the WYSIWYG editor, for those wanting to push it to the limit.}[block]main_tutorial_rating[/block]
