[title sub="Written by Chris Graham (ocProducts)"]Composr Tutorial: Advanced Comcode[/title]

This tutorial will explain some of the more advanced aspects of the Comcode system, for those who already have a handle on the basics.

[contents]decimal,lower-alpha[/contents]

[title="2"]Comcode Security[/title]

A great deal of emphasis is placed on making sure Comcode is secure, as it is available to all members of a Composr website. There is a privilege, 'allow insecure Comcode', and another 'allow nuisance Comcode': we recommend that these are left turned off except for staff.
There are additional mechanisms in Comcode to aid security, such as ones to stop JavaScript-powered URLs, and ones to stop people trying to using HTML entities to bypass JavaScript filtering.

Users can use HTML in Comcode, but it is subject to a security filter. There are two security filters used:
1) The whitelist filter. This is the most secure filter, and is used by default. It only allows certain HTML fragments to be used (fragments likely to be produced via usage of the WYSIWYG editor).
2) The blacklist filter. This is designed for high security, filtering out anything it sees as dangerous. Members are subjected to this filter if they have the "Subject to a more liberal HTML filter" permission.

Dangerous code includes:
 - JavaScript code (reason: code can be malicious, for example steal cookies)
 - CSS code rules block ([tt]style[/tt] element) (reason: style changes can be used to deceive a visitor)
 - Code to embed external files, such as JavaScript, CSS, applets, or browser plugins (reason: external code can either be malicious or adjust existing code to be malicious)
 - Meta tags (reason: could inkect the authorisation needed for taking over the Google Webmaster Tools, for example)
 - Code to change the overall page document structure (reason: can significantly change how the browser processes the page)

Some time in the future browsers may gain the ability to sandbox parts of web pages, which would allow us to relax these rules, but it seems a long way off still. We would need to wait for all web browsers in use to have adopted the new sandboxing behaviour before we could rely on it.

[title="2"]Custom Comcode[/title]

[media width="150" description="Adding a Custom Comcode tag" float="right"]data_custom/images/docs/tut_adv_comcode/adv_comcode_custom.png[/media]
{!custom_comcode:DOC_CUSTOM_COMCODE}

To add a custom tag, do as follows:
 - Enter the Admin Zone
 - In the Setup section, go to 'Custom Comcode'
 - Choose 'Add Custom Comcode tag'
 - Choose the tag codename you would like to use, a title for the tag, a description, and an example of how the tag would be used.
 - Tick the various check boxes as necessary.
 - Place the HTML you wish to use inside the 'Replacement text' field, and put '{content}' at the place where you wish for the tag content to be (the text that sits between the opening of the Comcode tag and the closing of the Comcode tag).
 - If you have additional parameters for the tag, list your chosen codenames, separated by commas, in the 'Parameters' field. Then place the codenames in the 'Replacement text' field, in a similar way to as you did for '{content}'.
 - Click the 'Add Custom Comcode tag' button

Your tag will be shown in your local copy of the Comcode tutorial, with your title, description and usage example.

[box="Tip" width="25em" float="right"]If you want to let users use some specific "dangerous" Comcode (such as Tempcode symbols, or an iframe), wrapping it up within a Custom Comcode tag is a great solution. As long as a user has permission to the tag itself (i.e. it's not added as dangerous), they can indirectly do what code it contains regardless of the nature of that code.[/box]
Note that Comcode is cached, and if you edit a tag after adding Comcode using it, it won't be updated until you edit that content (or the Comcode field precalculation cache is emptied).

[title="2"]Semi-HTML[/title]

The \[semihtml] tag is a special tag that allows Comcode and HTML to be naturally mixed together. Primarily, the tag is used so that the WYSIWYG editor, which is an HTML editor, may have Comcode placed within it that is not visual, and thus could not be edited in a WYSIWYG fashion.

The \[semihtml] tag is also useful if you are writing some content that has very tight formatting, so it involves a lot of HTML, but also includes elements of Comcode, such as blocks. Without the \[semihtml] tag, it would be necessary to keep opening and closing \[html] tags to achieve the same effect.

[title="2"]Syntax highlighting[/title]

Composr supports syntax highlighting via [url="GeSHi"]http://qbnz.com/highlighter/[/url]. This operates using the normal 'code' and 'codebox' tags, adding support for GeSHi highlighter codes to the 'param' attribute of the tags. We maintain a non-bundled GeSHi addon that provides the necessary files.

[title="2"]Comcode Menus (advanced)[/title]

Composr has had a dedicated menu editor, however you may also write menus in Comcode if you prefer. This method is likely to be preferred by users using a screen reader, as the whole menu is represented in a single readable text field.

[media width="150" description="The example in action" float="right"]data_custom/images/docs/tut_adv_comcode/comcode_menu.png[/media]
The menu tag takes a single parameter -- the codename assigned to the menu. Each menu should be assigned a different codename, and you may just make one up as you write the Comcode.

It is important to be careful not to break the syntactic rules for the menu formation, the syntax is delicate. The menu is [b]only[/b] designed for organising links. You should not attempt to store other content in a Comcode menu tag.

Here is an example of a menu tag in action...

[code="Comcode"]
[menu='some_codename']
-contracted section
 +expanded section
  page = URL
  page = URL
+expanded section
 page = URL
 page = URL
[/menu]
[/code]

[box="Tip" width="25em" float="right"]You can put a '~' symbol (tilde, commonly known as "that wiggly/twiddly symbol") before a URL if you want it to open in a new window.[/box]
Like the list syntax, the menu syntax specifies a tree structure, and uses indentation to do it. Things within a section, including the definition of sub-sections, are indented from the section start line itself.

The '-' means that a section is not expanded by default, whilst the '+' means that a section is. Those lines without a '+' or '-' are lines that are actually entries on the menu, and contain the caption of the entry, followed by ' = ', followed the the URL of the entry.

Menu entries are typed so that their indentation is equal to the indentation of the start of the section's title. i.e. one further depth of indentation from the section's '+' or '-'.

[title="2"]Relationships with other languages, and design choices[/title]

[title="3"]BBCode compatibility[/title]

Comcode is largely able to deal with [concept]BBCode[/concept] code. BBCode is a popular (but not formally-specified) system among standalone forum systems. Comcode is not formally designed as an extension of BBCode, but we intentionally aimed to be a super-set of it so that we are compatible with code imported from third-party forum systems, and so that our forum drivers can work well.

Comcode can support all major features of all the major BBCode-like languages, and lax syntax (for example, missing quotation symbols) as is often allowed in BBCode. However, BBCode implementations do not support a lot of the functionality of Comcode, such as the 'block' tag and our list syntax; in addition, the Comcode implementation is that of a fully parsed language, with a well-defined syntax, whilst BBCode is almost always implemented as an adhoc language to be turned into HTML via [concept]regular expressions[/concept].

[title="3"]Wiki-Code compatibility[/title]

[concept]Wiki-Code[/concept] is a text-formatting based language, rather than a tag based language.

We support a few other Wiki-Code conventions, in a way that is most similar to that of MediaWiki. We have opted to maintain most similarity to BBCode though, and have not provided [concept]Wiki-Code[/concept] syntax where there was already support via existing Comcode syntax.

[title="3"]Markdown compatibility[/title]

Markdown has become a very popular way of representing documents. In many ways it is similar to Comcode, but we have not made any effort to be compatible for these reasons:
1) it would add inconsistencies (multiple ways of doing things, leading to confusion)
2) it would add extra parsing overhead and complexity (i.e. likely bugs)
3) we target Comcode to have a much wider set of functionality than just document formatting (the sole purpose of Markdown)
4) Markdown does not play well with WYSIWYG editors, while Comcode is designed to work both with and without WYSIWYG

[title="3"]Semantics (advanced)[/title]

This section may be of interest to people with particular interest in programming language grammar.

[title="4"]Separation of concerns[/title]

Comcode is designed to be a language that is easy to use, versatile, rich, indistinguishable from plain-text in the simple case, and useful for writing small code snippets as well as long documents. It is not designed to have "separation of concerns" with any kind of special separation between visual coding (such as a font tag) and structural coding (such as a block tag, or arguably a ticker tag). Whilst the separation of concerns is appropriate for a website's main layout, which is often worked upon by different people, and where the mark-up is complex and detailed enough to warrant a separation, it is not appropriate for Comcode. This said, Comcode has good support for semantics...

[title="4"]Formatting tags vs semantic tags[/title]

Formatting tags define how things look. Semantic tags often do too, but they also define how things interpreted by computers, to give cues to search engines or accessibility devices.

[title="4"]Paragraphs vs line breaks[/title]

Comcode has excellent support for semantics, but there is just one small area where it isn't able to support them, which is paragraphs. In Comcode the XHTML5 is created using XHTML [tt]br[/tt] (line break) tags to separate lines. This has few practical ramifications known to us, and it is by necessity to make sure Comcode produces conformant and consistent XHTML5. However if you want to use XHTML [tt]p[/tt] tags, you should use the Comcode 'semihtml' tag so that you have full control over how whitespace will display.

Example:
[code="Comcode"]
First paragraph.

Second paragraph.
[/code]

Composr will produce:
[code="HTML"]
First paragraph.<br />
<br />
Second paragraph.
[/code]

Purists would expect:
[code="HTML"]
<p>First paragraph.</p>
<p>Second paragraph.</p>
[/code]

[title="4"]Comcode is not strictly a markup language[/title]

It is worth noting that the 'tag contents' of certain tags is of no visual significance what-so-ever (such as the block tag, where it has the codename of a block placed there, which is not itself displayed). This fact could be used to argue that Comcode is not a pure mark-up language.

[title="3"]Accessibility[/title]

There are some accessibility issues with certain Comcode tags, and these are described in the [page="_SEARCH:tut_accessibility"]Helping improve site accessibility for disabled users tutorial[/page].

[concepts
 1_key="Wiki-Code"   1_value="The mark-up language used on most Wiki systems"
 2_key="BBCode"      2_value="The mark-up language used on many discussion forum systems, which is similar to Comcode"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_comcode"]Comcode and the attachment system[/page]
 - [page="_SEARCH:tut_wysiwyg"]WYSIWYG editing[/page]
 - [page="_SEARCH:tut_accessibility"]Helping improve site accessibility for disabled users[/page]

{$SET,tutorial_tags,Content,custom_comcode,core_rich_media,regular}{$SET,tutorial_add_date,Aug 2008}{$SET,tutorial_summary,Some of the more advanced aspects of the Comcode system explained, for those who already know the basics.}[block]main_tutorial_rating[/block]
