[title sub="Written by Chris Graham, ocProducts"]Composr Tutorial: Aggregate Content Types[/title]

{!DOC_AGGREGATE_TYPES}

Aggregate content types are built on top of the [page="_SEARCH:tut_repository"]Composr repository[/page].

[contents]decimal,lower-alpha[/contents]

[title="2"]The admin process[/title]

The administrator, looking to make use of aggregate content types, would follow the following two-step process:
1) Define aggregate content types in XML, from Admin Zone > Structure > Aggregate Content Types > Edit XML definition.
2) Add instances of aggregate content types, from Admin Zone > Structure > Aggregate Content Types > Add aggregate content type instance.

The key feature of aggregate content types of course is that step 2 may be repeated many times, to build out complex structures with great efficiency.

[title="2"]XML definition[/title]

Aggregate content types are defined in XML in the [tt]data/xml_config/aggregate_types.xml[/tt] (overridden as [tt]data_custom/xml_config/aggregate_types.xml[/tt]).

Here is an example of the definition of two aggregate content types: Course, and Country...
[code="XML"]
<aggregateTypes>
    <aggregateType name="Course">
        <resource type="group" label="{LABEL*}" template_label="Newbie" />
        <resource type="catalogue_category" subpath="courses" label="{LABEL*}" template_label="_course">
            <property key="description">{DESCRIPTION*}</property>
            <access usergroup="{LABEL*}" value="1" />
            <privilege usergroup="{LABEL*}" preset="submit" />
            <privilege usergroup="{LABEL*}" name="submit_midrange_content" value="1" />
        </resource>
    </aggregateType>

    <aggregateType name="Country">
        <resource type="zone" label="{LABEL|*}" template_label="_country"> <!-- NB: the 'label' in this case is the zone codename -->
            <property key="human_title">{LABEL*}</property>
            <access usergroup="*" value="1" />
        </resource>
        <resource type="comcode_page" subpath="{LABEL|*}" label="start">
            <property resync="false" key="text">
                All about {LABEL*}.
            </property>
            <access usergroup="*" value="1" />
        </resource>
        <resource type="comcode_page" subpath="{LABEL|*}" label="panel_left">
            <property key="text">
                [block="{LABEL|*}"]menu[/block]
            </property>
            <access usergroup="*" value="1" />
        </resource>
        <resource type="menu_item" subpath="{LABEL|*}" label="Home">
            <property key="page_link">{LABEL|*}:start</property>
        </resource>
    </aggregateType>
</aggregateTypes>
[/code]

[title="3"]How the XML is applied when adding an instance[/title]

For each resource rule defined within the aggregate type we are creating an instance of...

A match is first found against the label in the given subpath. If none is found, a new content item will be created under that subpath, with the given label, defaulting from the given template (if a template is supplied).

A label is not a repository filename, but in fact generally what you would expect as human readable. What this actually relates to within Composr varies from content-type-to-content-type, but in most cases it is a Title field or a Name field.

For example, with:
[code]
<resource type="usergroup" label="{LABEL*}" template_label="Newbie" />
[/code]
We would look for a usergroup with a name that matches [tt]{LABEL*}[/tt], which is the label that the administrator would have provided for the new instance.

If there was a matching usergroup, we don't need to do anything in this case. If there was not, we would create it, by copying the usergroup named [tt]Newbie[/tt].

Resource rules may contain property rules, access rules, and privilege rules. Property rules set a property for the resource. You may set any property which the Composr repository supports for that resource type. Access rules and privilege rules are for setting permissions.

[title="3"]More detail on labels[/title]

Composr can look up the label because the repository is able to search against labels, not just filenames. We use labels here because they match what we're trying to build out much more directly -- if we find we can't get a match, we know the minimal of what we need to make (a content item with that label).

At no point do you reference raw content IDs. The repository does not use them (except within the internal code) and content-buildout naturally uses human-friendly naming.

[title="3"]More detail on subpaths[/title]

If no subpath is given for a resource rule, it is considered '' (i.e. blank). This means we are making a new folder (a category) for a content type that doesn't have hierarchical categories, or an entry for a content type that does not have categories at all.

Subpaths are from the content repository, relative to where the content type is stored in it (associated categories and entries are both stored under the same place - e.g. download categories and downloads are both under [tt]/var/downloads[/tt]). The path components are similar to labels, but monikerified (turned into a codename, which will be enforced as unique). You can find what they are by browsing the repository. Or, if it's a case where the content type uses a human readable codename, the subpath is usually the same as the codename (e.g. the name of a zone, or a gallery).

[title="3"]More detail on permissions[/title]

'Access' rules set view permissions, and 'privilege' rules set privileges. '1' grants access, and '0' denies access.

'usergroup' references are to usergroup labels. '[tt]*[/tt]' is understood specially as a wildcard, meaning to set against all usergroups.
Instead of a 'usergroup', you can specify a 'member', which is a reference to a member label (i.e. username).

The 'preset' values may be any of the following:
 - read
 - submit
 - unvetted
 - moderate

[title="3"]More detail on parameters[/title]

The XML is post-processed with Tempcode, which is why we write [tt]{LABEL*}[/tt] as if it was a Tempcode parameter. 'LABEL' is bound by a required parameter when creating any aggregate type instance. Any other parameters referenced within the XML will be automatically represented on the instance-creation form.

[title="3"]More detail on templates[/title]

Templates allow cloning of resources, so the XML doesn't need to define every new property required. The template is simply an existing instance of a resource that we will clone our new resource from.

'template_subpath' works the same as 'subpath', but for a template. Similarly, 'template_label' works the same as 'label', but to identify the template.

[title="2"]Synching[/title]

If a resource rule matches to an existing resource, it won't actually skip over things. It will actually change the properties of the matched resource to that specified. If you do not want this, you need to set [tt]resync="false"[/tt] on either the resource rule, or individual sub-rules.

You can actually manually re-sync all instances. This is useful if, for example, you have extended the XML structure with additional categories, and you want to create them out for your existing instances.
You can re-sync all instances of all aggregate content types, or for just a selection.

[title="2"]See also[/title]

 - [page="_SEARCH:tut_repository"]The Composr repository[/page]
 - [page="_SEARCH:tut_commandr"]Commandr[/page]
 - [page="_SEARCH:tut_structure"]Composr site structure[/page]

{$SET,tutorial_tags,aggregate_types,Content,Power tools,expert}{$SET,tutorial_add_date,May 2013}{$SET,tutorial_summary,How to set up complex content types, by linking standard Composr types/structure together.}[block]main_tutorial_rating[/block]
