[title sub="Written by Chris Graham (ocProducts)"]Composr Tutorial: Webhosting for Composr[/title]

[media width="350" float="right" framed="0"]data_custom/images/docs/tut_webhosting/kind.png[/media]
To put a website on-to the Internet, you need to arrange for 'webhosting'. This is usually done by paying for the services of a [concept]webhost[/concept], who will provide you space-on and access-to, a computer (a web server) that is permanently connected to the Internet via a high-speed connection.

This tutorial covers requirements for hosting Composr and some general information about webhosting and security.

This tutorial goes into great detail of all the low-level requirements (much of which you may not understand), and different environments to install on. Practically speaking almost any "PHP hosting" will run Composr, so long as it's not free ad-supported hosting. The verbosity of this tutorial is so that we can be really comprehensive. A simpler list is shown on the Composr download page.

[contents]decimal,lower-alpha[/contents]

[title="2"]Different hosting options[/title]

[media width="400" float="right" framed="0"]data_custom/images/docs/tut_webhosting/pick_webhost.png[/media]
You have the following options for hosting Composr (roughly):
 - Traditional shared webhosting (with a control panel)
 - Traditional VPS webhosting (with a control panel)
 - Traditional VPS webhosting (without a control panel)
 - Dedicated Linux server (with a control panel)
 - Dedicated Linux server (without a control panel)
 - Hosting on your own Windows desktop (for development purposes)
 - Hosting on a Windows server
 - Hosting on your own Mac desktop (for development purposes)
 - [concept]IaaS[/concept] cloud hosting (e.g. Amazon EC2, Azure, Rackspace)
 - [concept]PaaS[/concept] cloud hosting (e.g. AppFog, Heroku, Rackspace Cloud, Engine Yard, OpenShift)
 - Google App Engine, which is a special case of PaaS due to the high-level of organisation you need to work within. It is covered in [page="_SEARCH:tut_google_appengine"]its own[/page] tutorial.

The vast majority of users will choose traditional shared webhosting, or traditional VPS webhosting with a control panel.

Users with high requirements for CPU, memory, security, privacy, autonomy or disk space, may opt to get a [concept]dedicated server[/concept]. This is more expensive, and usually requires additional maintenance by the user, but for some users, is highly advisable.

Programmers will often prefer IaaS and PaaS hosting in order to get scalability. However scalability is not automatic with any system, so programmers need to put serious consideration into infrastructure. This is discussed more in the [page="_SEARCH:tut_performance"]Optimising Performance[/page] tutorial.

Regardless of your choice, you'll always be running the same underlying software (PHP etc). For the purpose of this tutorial the differences don't really matter, except where we provide specific advice on configuring platforms.
We have various different installation tutorials that go into details on how to install on the different hosting options.

[title="2"]Recommended shared webhost[/title]

We don't currently recommend any particular webhosts because it is a tricky thing. I'm afraid the answer will be rather cynical, but I want you to get a realistic outlook.

Webhosts have a tendency to take a turn for the worse at some point, as it's a race-to-the-bottom kind of industry -- any ones built on a good reputation tend to get taken over when the founders cash-out and then milked for it by a new team.

We advise picking your own webhost based on good reviews that are both recent and credible. Actively look for people complaining about the company to get a sense for whether these complaints are reveal a pattern of genuine concern (as opposed to general frustration with technology / unreasonable expectations from the webhost). Don't pick the cheapest, but also don't assume paying more guarantees good service.

Webhosts generally fit into 3 categories:
1) Good infrastructure, good support (pick a company like this, but it usually doesn't last long -- they're likely either losing money, or propped up by a passionate underpaid founding team who won't be there forever)
2) Good infrastructure, poor support (stick with a company like this because it's probably not worth the hassle to move)
3) Poor infrastructure, poor support (this is when you leave to a company in state '1')

Keep making sure you have your own backups so that you are able to always make a swift move if it becomes necessary.

[title="2"]Requirements and recommendations[/title]

[media width="480" thumb="1" framed="1" description="Easy-reference summary of the key hosting recommendations." float="right"]data_custom/images/docs/tut_webhosting/image.png[/media]
When choosing a webhost, you need to make sure that they meet all the requirements of Composr. Composr is intentionally designed to have very low requirements, so most [concept]PHP[/concept]/[concept]MySQL[/concept]-supporting webhosts should be compatible.

The remainder of this section details Composr's requirements. If you have trouble ascertaining a webhosts compliance, you may wish to contact them with this information. These requirements only apply to bundled functionality; non-bundled addons may have their own requirements.

[staff_note]Also update download.txt in composr_homesite branch[/staff_note]Composr requires:
 - A web server that runs PHP. PHP is software which provides the environment that Composr is written for;
  - version 5.6 or higher; we have tested up to and including PHP 7.0, although newer versions usually do work or are quickly fixed to work
  - GD2 extension (including PNG and JPEG support). GD is used by PHP for image generation, e.g. to generate thumbnails
  - file uploads with at least 5MB (or higher, depending on your particular needs)
  - MySQL extension ([tt]mysql[/tt] or [tt]mysqli[/tt])
  - XML extension
  - a maximum execution time of at least 30 seconds
  - key functions may not be disabled with [tt]disable_functions[/tt] (PHP can be stripped down heavily by disreputable webhosts) -- the installer will warn if any critical functions have been
  - no other explicit disabling of standard functionality that we require. Commonly webhosts do this using ModSecurity, Suhosin, suPHP or their own modified PHP versions. We do our best to workaround such issues for common recoverable cases, but ultimately if arbitrary standard functionality has been disabled the software cannot function.
  - memory limit of at least 128MB (as this is PHP's default memory limit since 2009).
 - At least 50MB of disk space, plus your needs for space for downloads, images, etc. No maximum file size limit under 25MB or file type whitelists (some free webhosts will impose these limits -- which explains why [tt]data.cms[/tt] might disappear when you try to upload it)
 - A database server that runs MySQL (*);
  - MySQL is the database software (software which allows creation of a number of separate databases) which Composr uses to store the majority of its data. Often webhosts will quote a number of databases that webhosting comes with: Composr only requires a single MySQL database to function.
  - version 5.5.3 (&dagger;) or higher
  - at least 10MB of database storage space is required, which should be available on any reputable webhost
 - A web server running Apache (the common Linux web server), {$IS_MAINTAINED,platform_litespeed,LiteSpeed} [an Apache drop-in replacement], or {$IS_MAINTAINED,platform_iis,IIS7+} [the Microsoft web server]. It is very unlikely you will find a webhost that provides something else. Other servers might work but are not supported (for example nginx should work, but you would need significant expertise to get the URL schemes functionality working);
  - If running Windows, you should use an NTFS partition not a FAT32 partition, as FAT32 cannot support file locking
  - If running Apache the server configuration needs to have [tt]AllowOverride All[/tt] or at least [tt]AllowOverride Options FileInfo Limit[/tt] (because we use distributed [tt].htaccess[/tt] files containing settings to increase security)
 - The CGI timeout on the server must not be lower than 60 seconds (which is the default on Apache)
 - That the web server is not overloaded with too many users, or has very poor performance
 - That the web server does not have a Firewall that stops outgoing connections or internal connections to itself (sometimes referred to 'HTTP loopback')
 - Connectivity to a mail server (SMTP) so that outgoing e-mail can be sent out to the staff e-mail address or the addresses of individual members
 - The install path does not contain the text "_custom" in it
 - Either a suEXEC-style server or a working FTP connection from PHP back to the hosting
(*) Other database software may work, but is not supported. MariaDB should work as a drop-in MySQL replacement but we do not proactively test against it. Certain permissions are required as described in the [page="_SEARCH:tut_install"]Basic Installation[/page] tutorial.
(&dagger;) MySQL 5.5.3 introduces the utf8mb4 character set, which is required to store emojis. The installer assumes you will install with this support available, but upgrades from older versions may work in anything from MySQL 4.1+ if the database is kept in latin1 via having [tt]$SITE_INFO['database_charset'] = 'latin1';[/tt] in [tt]_config.php[/tt]. This compatibility will not be guaranteed, but as webhosts have been very slow to upgrade MySQL installations we will informally try and maintain it.

[media float="right" thumb="0" framed="0"]data_custom/images/docs/tip.png[/media]
Composr recommends:
 - PHP versions:
  - PHP 7 is better than PHP 5.6 due to very significant performance and security improvements
  - Don't accept EOL ("end of life"). If a webhost or Linux distribution has a PHP version that is EOL, it is not just out-dated, but also insecure do (at the time of writing, anything less than PHP 5.6 is unsupported by the PHP developers)
  - Make sure your PHP version is updated with security fixes, even if you haven't updated to the latest major version[media width="480" thumb="1" framed="1" description="Easy-reference summary of the key hosting recommendations." float="right"]data_custom/images/docs/tut_webhosting/image.png[/media]
 - A PHP environment with the following PHP extensions/build-options and matching system software:
  - FTP &dagger;
  - pSpell or Enchant, with matching aspell/hunspell installs and dictionaries (spellchecking)
  - iconv or mbstring (Unicode support)
  - intl (Strong transliteration of non-European languages for quality URL moniker generation)
  - FreeType (with the build-option for GD). FreeType allows us to draw text onto graphics using TrueType fonts.
  - Zip
  - cURL
  - An opcode cache: Zend OpCache (bundled by default), APC (available for PHP 5.6 or lower only), XCache, Nusphere PhpExpress, or Wincache
 - A PHP environment with [tt]open_basedir[/tt] enabled
 - A suEXEC/IIS server (explained further down)
 - At least 100MB of disk space

&dagger; If you do not have the PHP FTP extension, then you will need either:
[list="a"]
[*] an environment where the web server user has recursive write access over the web directories (most Windows servers)
[*] an environment where the web server user is the same as the virtual hosting login user (suEXEC)
[/list]

[title="3"]Requirements for specific features[/title]

If you want automatic thumbnail generation you need a server with FFMPEG on it. It must be accessible via PHP either via the PHP extension, or the ability for [tt]shell_exec[/tt] to run from PHP.

Do not try and install Composr on an ad-sponsored free webhost. The banners and tracking they inject will interfere with the mechanisms of Composr.

If LDAP integration is required (for corporate network authentication integration), the PHP LDAP extension is required.

If Tornevall integration is required, the PHP SOAP extension is required.

If you need to be able to easily remove 'bounce' e-mails from newsletter subscriber lists, you will need the PHP IMAP extension. If your IMAP server requires SSL (like gmail) then you will need to have IMAP-SSL support inside PHP (or you will get "invalid remote specification" errors).

If encrypted CPFs (custom profile fields) are needed (see the [page="_SEARCH:tut_adv_members"]Advanced Composr member system[/page] tutorial), or Composr-fed DKIM, the PHP OpenSSL extension is required.

[title="3"]Package installation (advanced)[/title]

This section contains some suggestions for which packages to install on different Linux distributions to get a good PHP environment. It is only applicable to people who aren't on traditional hosting with a control panel to manage things from.

This section is not actively maintained. Package names may change, but it is designed to give a leg-up to people configuring new Linux servers.

[title="4"]Ubuntu/Debian[/title]

[code="Bash"]
apt-get install apache2 libapache2-mod-php5 php5 php5-common php5-cli php5-apcu php5-curl php5-enchant php5-ffmpeg php5-gd php5-imap php5-mysqlnd php5-pspell openssl mysql-server mysql-client postfix nano wget lynx hunspell git openssh-server nano wget
[/code]

Some lines in the default PHP ini ([tt]/etc/php5/apache2/php.ini[/tt]) file need changing:
[tt]upload_max_filesize = 2M[/tt] --> [tt]upload_max_filesize = 500M[/tt]
[tt]post_max_size = 8M[/tt] --> [tt]post_max_size = 500M[/tt]
[tt];date.timezone = [/tt] --> [tt]date.timezone = "UTC"[/tt] (to avoid errors on PHP startup)
[tt]; extension_dir = "./"[/tt] --> [tt]extension_dir = "usr/lib/php5/20121212"[/tt]
[tt];opcache.enable=0[/tt] --> [tt]opcache.enable=1[/tt]

(the extension_dir may actually be different on different versions, so check that)

[title="4"]Fedora/RHEL/CentOS[/title]

[code="Bash"]
yum install httpd php php-common php-cli php-pecl-apc php-pdo curl enchant freetype gd php-gd php-imap php-mysql php-mbstring php-pspell php-xml openssl mysql-server mysql sendmail nano wget lynx hunspell git openssh-server aspell aspell-en nano wget
[/code]

You may have selinux installed, you can see if you do with [tt]sestatus[/tt]:
[quote]
[root@localhost html]# sestatus
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   enforcing
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      28
[/quote]

If so, you need to set additional write permissions with something like:
[tt]chcon -R -t httpd_sys_rw_content_t /var/www[/tt]

You may also want to include [tt]yum-cron[/tt] (or [url="whatever it is now"]https://fedoraproject.org/wiki/AutoUpdates[/url]) in there, for automatic system updates (who has time to stay on top of all server software for urgent security patches?).

Some lines in the default PHP ini ([tt]/etc/php.ini[/tt]) file need changing:
[tt]upload_max_filesize = 2M[/tt] --> [tt]upload_max_filesize = 500M[/tt]
[tt]post_max_size = 8M[/tt] --> [tt]post_max_size = 500M[/tt]
[tt];date.timezone = [/tt] --> [tt]date.timezone = "UTC"[/tt] (to avoid errors on PHP startup)

[title="2"]Forum drivers (advanced)[/title]

If you wish to integrate an existing forum into Composr, rather than use our own, the forum must be one of:
 - {$IS_MAINTAINED,forum_ipb,Invision Board 2.3}
 - {$IS_MAINTAINED,forum_phpbb,phpBB 3.0}
 - {$IS_MAINTAINED,forum_mybb,myBB 1.4}
 - {$IS_MAINTAINED,forum_vb,vBulletin .7}
 - {$IS_MAINTAINED,forum_wbb,Burning Board 2.2/Lite}
 - {$IS_MAINTAINED,forum_smf,Simple Machine Forum 1.1}
If your forum is not on the list, professional developers are available to add support.

Please note that many 'forum systems' are referred to as 'bulletin boards', and that a 'forum' within 'forums' is often referred to as a 'board'. We consistently use the terms 'discussion forums', 'forums' and 'forum' to describe these.

We also provide converters for most of the above to our forum system, Conversr. If you currently use one of these systems, you have the option to convert it.

[box="Configurability of linked forums"]
Instead of naming the forum "Website comment topics" or "Website Support Tickets", you could name it "Mysite comment hub", "Mysite help region", or anything else you choose. Just be sure to change the configuration option to reflect it.

This is in the "Support Tickets" and "User interaction" groups of the "Feature Options" configuration category. Find this under Admin Zone > Setup > Configuration.
[/box]
If you have installed forums, you will likely wish to create a comments forum. To do this, create a non-public forum called 'Website comment topics'. This forum will be used to store topics relating to comments for content in your portal.

You may also wish to create a non-public forum called 'Website support tickets' if you wish to enable the support ticket feature.

[title="2"]Domain names[/title]

Most websites prefer to have a short and memorable Internet address, direct to their front page. In order to achieve this, you will need to pay for control of a domain name. A very large number of companies will provide these domains, and the facility to bind these names to your web-server, for a very low fee.

It is important to note that domain names are licenced on a temporary basis, and therefore you will need to renew your domain names. The length of the licence varies, but is typically between 1 and 5 years.

[title="2"]Ongoing maintenance responsibilities[/title]

Usually the webhost will take responsibility for the daily maintenance of the server. For example, keeping the server software, usually [concept]Linux[/concept] and common Linux software, up to date with security and stability [concept]patches[/concept]. However few webhosts will take serious responsibility for the maintenance (including backups) of your space on the server. If you are not using a traditional webhost then you probably are responsible for absolutely everything, so make sure you are comfortable with that.

It is important to understand the responsibilities for the various aspects of creating, maintaining and operating your website, before you launch your endeavour.

[title="2"]Basic server and site infrastructure[/title]

When you are provided webhosting, you are usually allocated a 'hosting control panel' that runs software such as:
 - Plesk
 - cPanel
 - Ensim
 - DirectAdmin
This allows you to manage your account on the server, and create databases, FTP accounts (additional to your primary account that already would exist), and e-mail addresses.

[b]Note:[/b] the next few paragraphs detail the complexities of a typical Linux file system, and is not necessary reading for most users.

The server itself, has a file system, much like a desktop computer, and is usually laid out something like as follows (this example is for a Linux server):

[tt]/
/home/
/home/your-account-name/
/home/your-account-name/httpdocs/
/var/
/var/mysql/
/var/mysql/your-database-name/
/var/mysql/your-database-name/<database-files>[/tt]

Of course this is only a partial detailing of the directory structure, but the intent is to provide you with an overview of what is really happening on your server. Usually you will not be able to, using your control panel or SFTP/FTP, see outside of '/home/your-account-name/'. When you install Composr, you usually would place the quick installer or manual installer files inside '/home/your-account-name/httpdocs/'; this is the directory that becomes accessible at the base URL of your website.

For instance, if your account on the server was associated with a domain name, 'mywebsite.com', then [tt]http://mywebsite.com/index.php[/tt] would be tied to the file system file, '/home/your-account-name/httpdocs/index.php' (often the 'www.' is removable, but not on all servers).
In addition, from your main FTP account, the same file would likely be '/httpdocs/index.php'.

In other words, three views of the file system exist, according to context:
[list="1"]
[*] The full file system view, which is usually completely hidden from you, but which is what Composr actually itself uses
[*] The FTP view, which branches off from the base of your account directory in the full file system view
[*] The URL view, which branches off from the httpdocs directory in your account directory
[/list]

As previously mentioned, this file system is merely illustrative. Different servers use different conventions; for example [tt]httpdocs[/tt] is often [tt]public_html[/tt] or [tt]www[/tt].

[title="2"]Server security[/title]

(Optimal configuration advice is provided in the [page="_SEARCH:tut_security"]Security[/page] tutorial -- we just cover some practical implications of configuration here)

There are two ways that webhosts may use to manage web application on the server:
1) Shared user
2) suEXEC-style

With a shared user, all sites run code as a user such as [tt]apache[/tt] or [tt]nobody[/tt]. This is simpler for the host to configure, but it is not a good idea for security. It also is the reason so much 'chmodding' may be needed (so the shared user has write access to files specifically on your account). In this scenario they will typically then lock other things down, such as denying shell access and setting an [tt]open_basedir[/tt] to sandbox PHP -- but rarely are these restrictions enough and it's an inherently incorrect approach for a shared webhost to take. Different server users are likely to be able to access and interfere with (erase and edit) each others files. We strongly advise any webhosts to use a suEXEC-style environment.

With a suEXEC-style hosting environment, sites run code under the same account that the site is held in. This is simpler, easier to configure, and more secure. "suEXEC" refers specifically to how the Apache server manages this, other server software will refer to it in different ways.

[title="3"]Worked example of a shared user permission scheme[/title]

Without suEXEC the web server will run under a web-server-specific user, such as [tt]apache[/tt] or [tt]nobody[/tt].

It is a good idea to understand the disparity of file ownership that can happen...

Let's assume the web server runs as [tt]apache[/tt], and your user account is [tt]bob[/tt].

Any file created by the web server (or PHP) would be owned by [tt]apache[/tt]. For example, Composr uploads, or Composr revision files.

Any files you manually uploaded (e.g. via FTP) would be owned by [tt]bob[/tt].

Both of these situations present a disparity in the permission scheme.

If [tt]apache[/tt] wants to write to a file you uploaded, it cannot, [i]unless you specified world-write permissions on the file[/i]. This is why we talk about file permissions in our documentation, saying exactly what needs to be set.

If you want to edit or delete a file made by the web server, using your FTP account, you cannot, [i]unless the server had specified world-write permissions on the file[/i]. Fortunately Composr is quite smart and it actually [i]does[/i] set world-write permissions on the [tt]apache[/tt] owned files. It does this because it automatically detects the disparity between the account owner and the user the server is running as.
Composr detects the account owner by seeing who owns the [tt]index.php[/tt] file.

So, the main take-away is:
[indent]If you do not have suEXEC, any files the web server needs to be able to write to need to be either reassigned to be owned by the web server (if you are a server admin you can do that, it's more secure if other users have login access to your web server) or given world-write permissions (what most Composr users would have to do)[/indent]

[concepts
 1_key="Webhost"            1_value="A provider of Internet server facilities"
 2_key="Dedicated server"   2_value="A server that is not shared with others"
 3_key="VPS"                3_value="A virtual private server. This works via allowing multiple virtual machines to run on a real host machine. Typically this is what cloud hosting is using behind-the-scenes"
 4_key="Linux"              4_value="The Linux operating system, very well suited to servers"
 5_key="Patches"            5_value="Patches are upgrades to software designed to fix problems, especially security ones nowadays"
 6_key="IaaS"               6_value="Infrastructure as a service. This is cloud hosting based on direct provision of VPSs."
 7_key="PaaS"               7_value="Platform as a service. This is cloud hosting based on providing direct support and configurability for particular programming language(s). It typically will hide the complexities of VPS management from you."
 8_key="SaaS"               8_value="Software as a service. This is what you are using when you create something like a Facebook page or a hosted blog, where you don't ever need to directly install/configure the software. This has advantages but severely limits configurability. Composr could be delivered as SaaS but the majority of users want a high degree of control over their sites."
 9_key="Traditional hosting"  9_value="Hosting managed via a webhost. Support is provided, servers are kept up-to-date, and control panels are provided for relatively easy system management."
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_install"]Basic Installation[/page]
 - [page="_SEARCH:tut_adv_install"]Advanced installation[/page]
 - [page="_SEARCH:tut_windows"]Installing Composr on a Windows desktop[/page]
 - [page="_SEARCH:tut_browsers"]Browser version requirements[/page]
 - [page="_SEARCH:tut_performance"]Optimising Performance[/page]
 - [page="_SEARCH:tut_security"]Security[/page]
 - [page="_SEARCH:tut_website_health"]Website Health[/page]

{$SET,tutorial_tags,Webhosting,core_database_drivers,Installation,novice}{$SET,tutorial_add_date,Aug 2008}{$SET,tutorial_summary,An overview of how the webhosting industry works, and the general requirements and compatibility for Composr.}[block]main_tutorial_rating[/block]
