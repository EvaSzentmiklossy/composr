<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    tickets
 */

/**
 * The UI to report content.
 *
 * @param Tempcode $title Screen title
 * @param ID_TEXT $content_type The content type being reported
 * @param ID_TEXT $content_id The content ID being reported
 * @return Tempcode The UI
 */
function report_content_form($title, $content_type, $content_id)
{
    require_code('tickets');

    require_lang('report_content');

    check_report_content_access($content_type, $content_id);

    require_code('content');
    list($content_title, $content_member_id, , $content_url) = content_get_details($content_type, $content_id);
    if ($content_title == '') {
        $content_title = $content_type . ' #' . $content_id;
    }

    $content_member = report_content_member_link($content_member_id);

    $report_post = do_template('REPORTED_CONTENT_FCOMCODE', array(
        '_GUID' => 'cb40aa1900eefcd24a0786b9d980fef6',
        'CONTENT_URL' => $content_url,
        'CONTENT_ID' => $content_id,
        'CONTENT_MEMBER' => $content_member,
        'CONTENT_MEMBER_ID' => strval($content_member_id),
        'CONTENT_TITLE' => $content_title,
    ));

    url_default_parameters__enable();

    $text = paragraph(do_lang_tempcode('DESCRIPTION_REPORT_CONTENT', escape_html($content_title), escape_html(integer_format(intval(get_option('reported_times'))))));
    report_content_append_text($text);

    $specialisation = report_content_form_fields();
    $hidden_fields = build_keep_form_fields('', true);

    $post_url = build_url(array('page' => 'report_content', 'type' => 'actual'), get_page_zone('report_content'));

    $posting_form = get_posting_form(do_lang('REPORT_CONTENT'), 'buttons__send', $report_post->evaluate(), $post_url, $hidden_fields, $specialisation, '', '', null, null, null, null, true, false, true);

    url_default_parameters__disable();

    return do_template('POSTING_SCREEN', array(
        '_GUID' => '92a0a35a7c07edd0d3f8a960710de608',
        'TITLE' => $title,
        'JAVASCRIPT' => function_exists('captcha_ajax_check') ? captcha_ajax_check() : '',
        'TEXT' => $text,
        'POSTING_FORM' => $posting_form,
    ));
}

/**
 * The UI to report a post.
 *
 * @param Tempcode $title Screen title
 * @param AUTO_LINK $post_id The post ID
 * @param string $javascript JavaScript code to include
 * @param ?array $topic_info The topic row (returned by reference) (null: )
 * @param ?array $post_info The topic row (returned by reference) (null: )
 * @return Tempcode The UI
 */
function report_post_form($title, $post_id, $javascript, &$topic_info = null, &$post_info = null)
{
    require_code('tickets');

    require_lang('report_content');

    check_report_content_access('post', strval($post_id));

    $forum_id = get_ticket_forum_id();

    $_post_info = $GLOBALS['FORUM_DB']->query_select('f_posts', array('*'), array('id' => $post_id), '', 1);
    if (!array_key_exists(0, $_post_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
    }
    $post_info = $_post_info[0];

    $topic_id = $post_info['p_topic_id'];

    $_topic_info = $GLOBALS['FORUM_DB']->query_select('f_topics', array('*'), array('id' => $topic_id), '', 1);
    if (!array_key_exists(0, $_topic_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'topic'));
    }
    $topic_info = $_topic_info[0];

    $content_member_id = $post_info['p_poster'];
    $content_member = report_content_member_link($content_member_id, $post_info['p_poster_name_if_guest']);

    $_postdetails = post_param_string('post', null);
    if ($_postdetails === null) {
        $post = preg_replace('#\[staff_note\].*\[/staff_note\]#Us', '', get_translated_text($post_info['p_post'], $GLOBALS['FORUM_DB']));
        $report_post = do_template('CNS_REPORTED_POST_FCOMCODE', array(
            '_GUID' => 'e0f65423f3cb7698d5f04431dbe52ddb',
            'POST_ID' => strval($post_id),
            'CONTENT_MEMBER_ID' => strval($content_member_id),
            'CONTENT_MEMBER' => $content_member,
            'TOPIC_TITLE' => $topic_info['t_cache_first_title'],
            'POST' => $post,
        ), null, false, null, '.txt', 'text');
    } else {
        $report_post = make_string_tempcode($_postdetails);
    }

    url_default_parameters__enable();

    $text = new Tempcode();
    report_content_append_text($text);

    $specialisation = report_content_form_fields();

    $hidden = new Tempcode();
    $hidden->attach(form_input_hidden('post_id', strval($post_id)));

    $post_url = build_url(array('page' => 'topics', 'type' => '_report_post'), get_page_zone('topics'));

    $posting_form = get_posting_form(do_lang('REPORT_POST'), 'buttons__report', $report_post->evaluate(), $post_url, $hidden, $specialisation, '', '', null, null, $javascript . (function_exists('captcha_ajax_check') ? captcha_ajax_check() : ''), null, true, false, true);

    url_default_parameters__disable();

    return do_template('POSTING_SCREEN', array(
        '_GUID' => 'eee64757e66fed702f74fecf8d595260',
        'TITLE' => $title,
        'TEXT' => $text,
        'POSTING_FORM' => $posting_form,
    ));
}

/**
 * Check the current user has post reporting access.
 *
 * @param ID_TEXT $content_type The content type being reported
 * @param ID_TEXT $content_id The content ID being reported
 */
function check_report_content_access($content_type = null, $content_id = null)
{
    if ((!has_privilege(get_member(), 'may_report_content')) || (!addon_installed('tickets'))) {
        access_denied('I_ERROR');
    }

    $forum_id = get_ticket_forum_id();

    if (($content_type !== null) && ($content_id !== null)) {
        if ($GLOBALS['SITE_DB']->query_select_value_if_there('reported_content', 'r_counts', array(
            'r_session_id' => get_session_id(),
            'r_content_type' => $content_type,
            'r_content_id' => $content_id,
        )) !== null) {
            warn_exit(do_lang_tempcode('ALREADY_REPORTED_CONTENT'));
        }
    }
}

/**
 * Get a member content link in Comcode format.
 *
 * @param ?MEMBER $content_member_id Member ID of the original content (null: unknown)
 * @param ?string $content_poster_name_if_guest Member name if a guest (null: unknown)
 * @return string Member link
 */
function report_content_member_link($content_member_id, $content_poster_name_if_guest)
{
    if ($content_poster_name_if_guest === null) {
        $content_poster_name_if_guest = do_lang('UNKNOWN');
    }
    if (($content_member_id !== null) && (!is_guest($content_member_id))) {
        if (!is_guest($content_member_id)) {
            $content_member = '[page="_SEARCH:members:view:' . strval($content_member_id) . '"]' . $content_member . '[/page]';
        } else {
            $content_member = $content_poster_name_if_guest;
        }
    } else {
        $content_member = $content_poster_name_if_guest;
    }
    return $content_member;
}

/**
 * Get form fields (apart from main posting field) for report form.
 *
 * @return Tempcode Form fields
 */
function report_content_form_fields()
{
    require_code('form_templates');

    if ((!is_guest()) && (get_forum_type() == 'cns')) {
        $options = array();
        require_code('cns_forums');
        if (cns_forum_allows_anonymous_posts($forum_id)) {
            $options[] = array(do_lang_tempcode('_MAKE_ANONYMOUS_POST'), 'anonymous', false, do_lang_tempcode('MAKE_ANONYMOUS_POST_DESCRIPTION'));
        }
        $specialisation = form_input_various_ticks($options, '');
    } else {
        $specialisation = new Tempcode();
    }
	return $specialisation;
}

/**
 * Get standard text for a report form.
 *
 * @param Tempcode $text Append the text here
 */
function report_content_append_text(&$text)
{
    if (addon_installed('captcha')) {
        require_code('captcha');
        if (use_captcha()) {
            $specialisation->attach(form_input_captcha());
            $text->attach(paragraph(do_lang_tempcode('FORM_TIME_SECURITY')));
        }
    }

    if (addon_installed('points')) {
        $login_url = build_url(array('page' => 'login', 'type' => 'browse', 'redirect' => get_self_url(true, true)), get_module_zone('login'));
        $_login_url = escape_html($login_url->evaluate());
        if ((is_guest()) && ((get_forum_type() != 'cns') || (has_actual_page_access(get_member(), 'join')))) {
            $text->attach(paragraph(do_lang_tempcode('NOT_LOGGED_IN_NO_CREDIT', $_login_url)));
        }
    }
}

/**
 * The actualiser to report content.
 *
 * @param AUTO_LINK $post_id Post ID being reported
 * @param string $report_post Report post
 * @param BINARY $anonymous Anonymous
 * @param ?string $poster_name_if_guest Poster name (null: read from environment)
 * @param BINARY $open Report is open
 * @param ?TIME $time Report time (null: now)
 * @param ?MEMBER $member_id Reporting member (null: current member)
 */
function report_content($content_type, $content_id, $report_post, $anonymous = 0, $poster_name_if_guest = null, $open = 1, $time = null, $member_id = null)
{
    require_code('tickets');

    require_lang('report_content');

    require_code('content');
    list($content_title) = content_get_details($content_type, $content_id);

    check_report_content_access($content_type, $content_id);

    $report_title = do_lang('REPORTED_CONTENT_TITLE', $content_title);

    _report_content($content_type, $content_id, $report_title, $report_post, $anonymous, $poster_name_if_guest, $open, $time, $member_id);
}

/**
 * Report a post, with simplified input. Feeds report_post.
 *
 * @param AUTO_LINK $post_id Post ID being reported
 * @param string $reason Reason for action
 * @param BINARY $anonymous Anonymous
 * @param ?string $poster_name_if_guest Poster name (null: read from environment)
 * @param BINARY $open Report is open
 * @param ?TIME $time Report time (null: now)
 * @param ?MEMBER $member_id Reporting member (null: current member)
 */
function report_post_headless($post_id, $reason = '', $anonymous = 0, $poster_name_if_guest = null, $open = 1, $time = null, $member_id = null)
{
    require_code('tickets');

    require_lang('report_content');

    $table_prefix = $GLOBALS['FORUM_DB']->get_table_prefix();
    $_post_info = $GLOBALS['FORUM_DB']->query_select('f_posts p JOIN ' . $table_prefix . 'f_topics t on t.id=p.p_topic_id', array('*', 'p.id AS post_id', 't.id AS topic_id'), array('p.id' => $post_id), '', 1);
    if (!array_key_exists(0, $_post_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
    }
    $post_info = $_post_info[0];

    $topic_title = $post_info['t_cache_first_title'];

    $content_member_id = $post_info['p_poster'];
    $content_member = report_content_member_link($content_member_id, $post_info['p_poster_name_if_guest']);

    $post = preg_replace('#\[staff_note\].*\[/staff_note\]#Us', '', get_translated_text($post_info['p_post'], $GLOBALS['FORUM_DB']));
    $report_post = do_template('CNS_REPORTED_POST_FCOMCODE', array(
        '_GUID' => '6e9a43a3503c357b52b724e11d3d4eef',
        'POST_ID' => strval($post_id),
        'CONTENT_MEMBER' => $content_member,
        'CONTENT_MEMBER_ID' => $content_member_id,
        'TOPIC_TITLE' => $topic_title,
        'POST' => $post,
    ), null, false, null, '.txt', 'text');
    if ($reason != '') {
        $report_post->attach($reason);
    }

    report_post($post_id, $report_post->evaluate(), $anonymous, $poster_name_if_guest, $open, $time, $member_id);
}

/**
 * The actualiser to report a post.
 *
 * @param AUTO_LINK $post_id Post ID being reported
 * @param string $report_post Report post
 * @param BINARY $anonymous Anonymous
 * @param ?string $poster_name_if_guest Poster name (null: read from environment)
 * @param BINARY $open Report is open
 * @param ?TIME $time Report time (null: now)
 * @param ?MEMBER $member_id Reporting member (null: current member)
 */
function report_post($post_id, $report_post, $anonymous = 0, $poster_name_if_guest = null, $open = 1, $time = null, $member_id = null)
{
    require_code('tickets');

    require_lang('report_content');

    check_report_content_access('post', strval($post_id));

    $table_prefix = $GLOBALS['FORUM_DB']->get_table_prefix();
    $_post_info = $GLOBALS['FORUM_DB']->query_select('f_posts p JOIN ' . $table_prefix . 'f_topics t on t.id=p.p_topic_id', array('*', 'p.id AS post_id', 't.id AS topic_id'), array('p.id' => $post_id), '', 1);
    if (!array_key_exists(0, $_post_info)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE', 'post'));
    }
    $post_info = $_post_info[0];

    $_title = $post_info['p_title'];
    if ($_title == '') {
        $_title = $post_info['t_cache_first_title'];
    }
    $report_title = do_lang('REPORTED_POST_TITLE', $_title);

    $content_type = 'post';
    $content_id = strval($post_id);
    _report_content($content_type, $content_id, $report_title, $report_post, $anonymous, $poster_name_if_guest, $open, $time, $member_id);
}

/**
 * The shared backend to report content/posts.
 *
 * @param ID_TEXT $content_type The content type being reported
 * @param ID_TEXT $content_id The content ID being reported
 * @param string $report_title Report title
 * @param string $report_post Report post
 * @param BINARY $anonymous Anonymous
 * @param ?string $poster_name_if_guest Poster name (null: read from environment)
 * @param BINARY $open Report is open
 * @param ?TIME $time Report time (null: now)
 * @param ?MEMBER $member_id Reporting member (null: current member)
 */
function _report_content($content_type, $content_id, $report_title, $report_post, $anonymous = 0, $poster_name_if_guest = null, $open = 1, $time = null, $member_id = null)
{
    // TODO: CNS assumptions

    require_code('cns_posts_action');
    require_code('cns_topics_action');

    $forum_id = get_ticket_forum_id();

    if ($poster_name_if_guest === null) {
        $poster_name_if_guest = cns_get_safe_specified_poster_name();

        if ($anonymous == 1) {
            if (cns_forum_allows_anonymous_posts($forum_id)) {
                $poster_name_if_guest = null;
            } else {
                $anonymous = 0;
            }
        }
    }

    // See if post already reported...
    $topic_id = $GLOBALS['FORUM_DB']->query_select_value_if_there('f_topics t LEFT JOIN ' . $GLOBALS['FORUM_DB']->get_table_prefix() . 'f_posts p ON p.id=t.t_cache_first_post_id', 't.id', array('p.p_title' => $report_title, 't.t_forum_id' => $forum_id));
    if ($topic_id !== null) {
        // Already a topic
        $first_post = false;
    } else { // New topic
        $topic_id = cns_make_topic($forum_id, '', '', 1, $open, 0, 0, null, null, false);
        $first_post = true;
    }

    $post_id = cns_make_post($topic_id, $report_title, $report_post, 0, $first_post, 1, 0, $poster_name_if_guest, null, $time, $member_id, null, null, null, false, true, null, true, $report_title, null, $anonymous == 1, true, false, false, null);

    delete_cache_entry('main_staff_checklist');

    if ($anonymous == 1) {
        log_it('MAKE_ANONYMOUS_POST', strval($post_id), $report_title);
    }

    // Add to reported_content table
    $GLOBALS['SITE_DB']->query_insert('reported_content', array(
        'r_session_id' => get_session_id(),
        'r_content_type' => $content_type,
        'r_content_id' => $content_id,
        'r_counts' => 1,
    ));

    // If hit threshold, mark down r_counts and unvalidate the content
    $count = $GLOBALS['SITE_DB']->query_select_value('reported_content', 'COUNT(*)', array(
        'r_content_type' => $content_type,
        'r_content_id' => $content_id,
        'r_counts' => 1,
    ));
    if ($count >= intval(get_option('reported_times'))) {
        require_code('content');
        list(, , $cma_info, , $content_url) = content_get_details($content_type, $content_id);

        // Mark as unvalidated
        if (($cma_info['validated_field'] !== null) && (strpos($cma_info['table'], '(') === false)) {
            $db = $GLOBALS[(substr($cma_info['table'], 0, 2) == 'f_') ? 'FORUM_DB' : 'SITE_DB'];
            $db->query_update($cma_info['table'], array($cma_info['validated_field'] => 0), get_content_where_for_str_id($content_id, $cma_info));
        }

        // Reset counter
        $GLOBALS['SITE_DB']->query_update('reported_content', array('r_counts' => 0), array(
            'r_content_type' => $content_type,
            'r_content_id' => $content_id,
        ));
    }
}
