<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    shopping
 */

/*
Orders are compound-products. They link together multiple eCommerce items into a single purchasable set with a fixed price.
*/

/**
 * eCommerce product hook.
 */
class Hook_ecommerce_cart_orders
{
    /**
     * Get the products handled by this eCommerce hook.
     *
     * IMPORTANT NOTE TO PROGRAMMERS: This function may depend only on the database, and not on get_member() or any GET/POST values.
     *  Such dependencies will break IPN, which works via a Guest and no dependable environment variables. It would also break manual transactions from the Admin Zone.
     *
     * @param  boolean $site_lang Whether to make sure the language for item_name is the site default language (crucial for when we read/go to third-party sales systems and use the item_name as a key).
     * @param  ?ID_TEXT $search Product being searched for (null: none).
     * @param  boolean $search_item_names Whether $search refers to the item name rather than the product codename.
     * @return array A map of product name to list of product details.
     */
    public function get_products($site_lang = false, $search = null, $search_item_names = false)
    {
        $products = array();

        require_lang('shopping');

        if (php_function_allowed('set_time_limit')) {
            @set_time_limit(0);
        }

        if ($search !== null) {
            $l = do_lang('CART_ORDER', '', null, null, $site_lang ? get_site_default_lang() : user_lang());
            if (substr($search, 0, strlen($l)) != $l) {
                return array();
            }
            $where = 'id=' . strval(intval(substr($search, strlen($l))));
            // NB: $search_item_names is ignored because codename is the same as item name for this hook
        } else {
            $where = '(' . db_string_equal_to('order_status', 'ORDER_STATUS_awaiting_payment') . ' OR ' . db_string_equal_to('order_status', 'ORDER_STATUS_payment_received') . ')';
        }

        if ($search === null) {
            $count = $GLOBALS['SITE_DB']->query_value_if_there('SELECT COUNT(*) FROM ' . get_table_prefix() . 'shopping_order WHERE ' . $where);
            if ($count > 50) {
                return array(); // Too many to list
            }
        }

        $start = 0;
        do {
            $orders = $GLOBALS['SITE_DB']->query('SELECT id,tot_price FROM ' . get_table_prefix() . 'shopping_order WHERE ' . $where, 500, null, false, true);

            foreach ($orders as $order) {
                $products[do_lang('CART_ORDER', strval($order['id']), null, null, $site_lang ? get_site_default_lang() : user_lang())] = array(
                    'item_name' => do_lang('CART_ORDER', strval($order['id']), null, null, $site_lang ? get_site_default_lang() : user_lang()),
                    'item_description' => do_lang_tempcode('CART_ORDER_DESCRIPTION', escape_html(strval($order['id']))),
                    'item_image_url' => find_theme_image('icons/48x48/menu/rich_content/ecommerce/shopping_cart'),

                    'type' => PRODUCT_ORDERS,
                    'type_special_details' => array(),

                    'price' => $order['tot_price'],
                    'currency' => get_option('currency'),
                    'price_points' => null,
                    'discount_points__num_points' => null,
                    'discount_points__price_reduction' => null,

                    'needs_shipping_address' => true,
                );
            }

            $start += 500;
        } while (count($orders) == 500);

        return $products;
    }

    /**
     * Check whether the product codename is available for purchase by the member.
     *
     * @param  ID_TEXT $type_code The product codename.
     * @param  MEMBER $member_id The member we are checking against.
     * @param  integer $req_quantity The number required.
     * @param  boolean $must_be_listed Whether the product must be available for public listing.
     * @return integer The availability code (a ECOMMERCE_PRODUCT_* constant).
     */
    public function is_available($type_code, $member_id, $req_quantity = 1, $must_be_listed = false)
    {
        return ECOMMERCE_PRODUCT_AVAILABLE;
    }

    /**
     * Get the filled in fields and do something with them.
     *
     * @param  ID_TEXT $type_code The product codename.
     * @return array A pair: The purchase ID, a confirmation box to show (null for no specific confirmation).
     */
    public function handle_needed_fields($type_code)
    {
        return array(preg_replace('#^.*\##', '', $type_code), null);
    }

    /**
     * Handling of a product purchase change state.
     *
     * @param  ID_TEXT $type_code The product codename.
     * @param  ID_TEXT $purchase_id The purchase ID.
     * @param  array $details Details of the product, with added keys: TXN_ID, PAYMENT_STATUS, ORDER_STATUS.
     */
    public function actualiser($type_code, $purchase_id, $details)
    {
        if (!isset($details['ORDER_STATUS'])) {
            return;
        }

        require_code('shopping');
        require_lang('shopping');

        $order_id = intval($purchase_id);

        if ($details['PAYMENT_STATUS'] == 'Completed') {
            $member_id = $GLOBALS['SITE_DB']->query_select_value('shopping_order', 'c_member', array('id' => $order_id));
            $GLOBALS['SITE_DB']->query_insert('ecom_sales', array('date_and_time' => time(), 'member_id' => $member_id, 'details' => $details['item_name'], 'details2' => '', 'transaction_id' => $details['TXN_ID']));
        }

        $old_status = $GLOBALS['SITE_DB']->query_select_value('shopping_order_details', 'dispatch_status', array('order_id' => $order_id));

        if ($old_status != $details['ORDER_STATUS']) {
            $GLOBALS['SITE_DB']->query_update('shopping_order_details', array('dispatch_status' => $details['ORDER_STATUS']), array('order_id' => $order_id));

            $GLOBALS['SITE_DB']->query_update('shopping_order', array('order_status' => $details['ORDER_STATUS'], 'transaction_id' => $details['TXN_ID']), array('id' => $order_id));

            // Copy in memo from transaction, as customer notes
            $old_memo = $GLOBALS['SITE_DB']->query_select_value('shopping_order', 'notes', array('id' => $order_id));
            if ($old_memo == '') {
                $memo = $GLOBALS['SITE_DB']->query_select_value('ecom_transactions', 't_memo', array('id' => $details['TXN_ID']));
                if ($memo != '') {
                    $memo = do_lang('CUSTOMER_NOTES') . "\n" . $memo;
                    $GLOBALS['SITE_DB']->query_update('shopping_order', array('notes' => $memo), array('id' => $order_id), '', 1);
                }
            }

            if ($details['ORDER_STATUS'] == 'ORDER_STATUS_payment_received') {
                purchase_done_staff_mail($order_id);
            }

            // We won't log to the ecom_sales as we log the order instead (in much more detail)
        }
    }

    /**
     * Get the member who made the purchase.
     *
     * @param  ID_TEXT $type_code The product codename.
     * @param  ID_TEXT $purchase_id The purchase ID.
     * @return ?MEMBER The member ID (null: none).
     */
    public function member_for($type_code, $purchase_id)
    {
        $order_id = intval($purchase_id);
        return $GLOBALS['SITE_DB']->query_select_value_if_there('shopping_order', 'c_member', array('id' => $order_id));
    }

    /**
     * Function to return dispatch type of product.
     * (this hook represents a cart order, so find all of it's sub products's dispatch type and decide cart order product's dispatch type - automatic or manual)
     *
     * @param  SHORT_TEXT $order_id Item ID.
     * @return SHORT_TEXT Dispatch type.
     */
    public function get_product_dispatch_type($order_id)
    {
        $rows = $GLOBALS['SITE_DB']->query_select('shopping_order_details', array('*'), array('order_id' => $order_id));

        foreach ($rows as $item) {
            if ($item['p_type'] === null) {
                continue;
            }

            require_code('hooks/systems/ecommerce/' . filter_naughty_harsh($item['p_type']));

            $product_object = object_factory('Hook_ecommerce_' . filter_naughty_harsh($item['p_type']));

            // If any of the product's dispatch type is manual, return type as 'manual'
            if ($product_object->get_product_dispatch_type() == 'manual') {
                return 'manual';
            }
        }

        // If none of product items have manual dispatch, return order dispatch as automatic.
        return 'automatic';
    }
}
