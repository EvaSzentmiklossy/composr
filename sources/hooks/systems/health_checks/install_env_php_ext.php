<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2018

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    health_check
 */

/**
 * Hook class.
 */
class Hook_health_check_install_env_php_ext extends Hook_Health_Check
{
    protected $category_label = 'Installation environment (PHP extensions)';

    /**
     * Standard hook run function to run this category of health checks.
     *
     * @param  ?array $sections_to_run Which check sections to run (null: all)
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     * @return array A pair: category label, list of results
     */
    public function run($sections_to_run, $check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null)
    {
        $this->process_checks_section('testCurl', 'cURL', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass);
        $this->process_checks_section('testGD', 'GD', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass);
        $this->process_checks_section('testUnicode', 'Unicode', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass);
        $this->process_checks_section('testXML', 'XML', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass);
        $this->process_checks_section('testUnzip', 'Unzip', $sections_to_run, $check_context, $manual_checks, $automatic_repair, $use_test_data_for_pass);

        return array($this->category_label, $this->results);
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     */
    public function testGD($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null)
    {
        if (!function_exists('imagecreatefromstring')) {
            $this->assertTrue(false, do_lang('NO_GD_ON_SERVER'));
        } else {
            $this->assertTrue(($this->get_gd_version() >= 2.0), do_lang('OLD_GD_ON_SERVER'));

            $this->assertTrue(function_exists('imagepng'), do_lang('NO_GD_ON_SERVER_PNG'));
            $this->assertTrue(function_exists('imagejpeg'), do_lang('NO_GD_ON_SERVER_JPEG'));
            $this->assertTrue(function_exists('imagettfbbox'), do_lang('NO_GD_ON_SERVER_TTF'));
        }
    }

    /**
     * Get the version number of GD on the system. It should only be called if GD is known to be on the system, and in use.
     *
     * @return float The version of GD installed
     */
    protected function get_gd_version()
    {
        $info = gd_info();
        $matches = array();
        if (preg_match('#(\d(\.|))+#', $info['GD Version'], $matches) != 0) {
            $version = $matches[0];
        } else {
            $version = $info['version'];
        }
        return floatval($version);
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     */
    public function testUnicode($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null)
    {
        $this->assertTrue((function_exists('mb_strlen')) || (function_exists('iconv_strlen')), do_lang('MISSING_UTF_SUPPORT'));
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     */
    public function testCurl($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null)
    {
        $this->assertTrue(function_exists('curl_init'), do_lang('NO_CURL_ON_SERVER'));
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     */
    public function testXML($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null)
    {
        $this->assertTrue(function_exists('xml_parser_create'), do_lang('NO_XML_ON_SERVER'));
    }

    /**
     * Run a section of health checks.
     *
     * @param  integer $check_context The current state of the website (a CHECK_CONTEXT__* constant)
     * @param  boolean $manual_checks Mention manual checks
     * @param  boolean $automatic_repair Do automatic repairs where possible
     * @param  ?boolean $use_test_data_for_pass Should test data be for a pass [if test data supported] (null: no test data)
     */
    public function testUnzip($check_context, $manual_checks = false, $automatic_repair = false, $use_test_data_for_pass = null)
    {
        $this->assertTrue((function_exists('zip_open')) || (@file_exists('/usr/bin/unzip')), do_lang('NO_ZIP_ON_SERVER'));
    }
}
