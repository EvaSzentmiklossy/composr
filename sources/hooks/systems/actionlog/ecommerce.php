<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_actionlog_ecommerce extends Hook_actionlog
{
    /**
     * Get details of action log entry types handled by this hook.
     *
     * @return array Map of handler data in standard format
     */
    protected function get_handlers()
    {
        if (!addon_installed('ecommerce')) {
            return array();
        }

        require_lang('ecommerce');

        return array(
            'ADD_USERGROUP_SUBSCRIPTION' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'usergroup_subscription',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    'EDIT_THIS_USERGROUP_SUBSCRIPTION' => '_SEARCH:admin_ecommerce:_edit:{ID}',
                    'ADD_USERGROUP_SUBSCRIPTION' => '_SEARCH:admin_ecommerce:add',
                ),
            ),
            'EDIT_USERGROUP_SUBSCRIPTION' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'usergroup_subscription',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    'EDIT_THIS_USERGROUP_SUBSCRIPTION' => '_SEARCH:admin_ecommerce:_edit:{ID}',
                    'ADD_USERGROUP_SUBSCRIPTION' => '_SEARCH:admin_ecommerce:add',
                ),
            ),
            'DELETE_USERGROUP_SUBSCRIPTION' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'usergroup_subscription',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    'ADD_USERGROUP_SUBSCRIPTION' => '_SEARCH:admin_ecommerce:add',
                ),
            ),
            'CREATE_INVOICE' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => null,
                'identifier_index' => 0,
                'written_context_index' => null,
                'followup_page_links' => array(
                    'VIEW_PROFILE' => array('FORUM_DRIVER__PROFILE_URL', '{MEMBER_ID}'),
                    'CREATE_INVOICE' => '_SEARCH:admin_invoices:add',
                ),
            ),
            'DELETE_INVOICE' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => null,
                'identifier_index' => 0,
                'written_context_index' => null,
                'followup_page_links' => array(
                    'CREATE_INVOICE' => '_SEARCH:admin_invoices:add',
                ),
            ),
        );
    }

    /**
     * Get written context for an action log entry handled by this hook.
     *
     * @param  array $actionlog_row Action log row
     * @param  array $handler_data Handler data
     */
    protected function get_written_context($actionlog_row, $handler_data)
    {
        switch ($actionlog_row['the_type']) {
            case 'CREATE_INVOICE':
                $member_id = $GLOBALS['SITE_DB']->query_select_value_if_there('invoices'/*TODO: Change to ecom_invoices in v11*/, 'i_member_id', array('id' => intval($actionlog_row['param_a'])));
                if ($member_id !== null) {
                    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
                    if ($username === null) {
                        $username = '#' . strval($member_id);
                    }
                } else {
                    $username = do_lang('UNKNOWN');
                }

                $written_context = do_lang('SOMETHING_FROM', integer_format(intval($actionlog_row['param_b'])) . ' ' . get_option('currency'), $username);
                return $written_context;
        }

        return parent::get_written_context($actionlog_row, $handler_data);
    }

    /**
     * Get details of action log entry types handled by this hook.
     *
     * @param  array $actionlog_row Action log row
     * @param  ?string $identifier The identifier associated with this action log entry (null: unknown / none)
     * @param  ?string $written_context The written context associated with this action log entry (null: unknown / none)
     * @param  array $bindings Default bindings
     */
    protected function get_extended_actionlog_bindings($actionlog_row, $identifier, $written_context, &$bindings)
    {
        switch ($actionlog_row['the_type']) {
            case 'CREATE_INVOICE':
                $member_id = $GLOBALS['SITE_DB']->query_select_value_if_there('invoices'/*TODO: Change to ecom_invoices in v11*/, 'i_member_id', array('id' => intval($identifier)));
                if ($member_id !== null) {
                    $bindings += array(
                        'MEMBER_ID' => strval($member_id),
                    );
                }
                break;
        }
    }
}
