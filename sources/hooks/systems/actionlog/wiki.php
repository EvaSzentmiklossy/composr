<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    wiki
 */

/**
 * Hook class.
 */
class Hook_actionlog_wiki extends Hook_actionlog
{
    /**
     * Get details of action log entry types handled by this hook.
     *
     * @return array Map of handler data in standard format
     */
    protected function get_handlers()
    {
        if (!addon_installed('wiki')) {
            return array();
        }

        require_lang('wiki');

        return array(
            'WIKI_ADD_PAGE' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_page',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{ID}',
                ),
            ),
            'WIKI_EDIT_PAGE' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_page',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{ID}',
                ),
            ),
            'WIKI_DELETE_PAGE' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_page',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    'WIKI_HOME' => '_SEARCH:wiki',
                ),
            ),
            'WIKI_EDIT_TREE' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_page',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{ID}',
                ),
            ),
            'WIKI_MAKE_POST' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_post',
                'identifier_index' => 0,
                'written_context_index' => null,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{1}',
                    'WIKI_EDIT_POST' => '_SEARCH:wiki:post:post_id={ID}',
                ),
            ),
            'WIKI_EDIT_POST' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_post',
                'identifier_index' => 0,
                'written_context_index' => null,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{1}',
                    'WIKI_EDIT_POST' => '_SEARCH:wiki:post:post_id={ID}',
                ),
            ),
            'WIKI_DELETE_POST' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_post',
                'identifier_index' => 0,
                'written_context_index' => null,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{1}',
                ),
            ),
            'MERGE_WIKI_POSTS' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_page',
                'identifier_index' => 0,
                'written_context_index' => 1,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{ID}',
                ),
            ),
            'WIKI_MOVE_POST' => array(
                'flags' => ACTIONLOG_FLAGS_NONE,
                'cma_hook' => 'wiki_post',
                'identifier_index' => 0,
                'written_context_index' => null,
                'followup_page_links' => array(
                    '_WIKI_PAGE' => '_SEARCH:wiki:browse:{1}',
                    'WIKI_EDIT_POST' => '_SEARCH:wiki:post:post_id={ID}',
                ),
            ),
        );
    }

    /**
     * Get written context for an action log entry handled by this hook.
     *
     * @param  array $actionlog_row Action log row
     * @param  array $handler_data Handler data
     */
    protected function get_written_context($actionlog_row, $handler_data)
    {
        switch ($actionlog_row['the_type']) {
            case 'WIKI_MAKE_POST':
            case 'WIKI_DELETE_POST':
                $page_title = $GLOBALS['SITE_DB']->query_select_value_if_there('wiki_pages', 'title', array('id' => intval($actionlog_row['param_b'])));
                if ($page_title === null) {
                    return '#' . $actionlog_row['param_a'];
                }
                $written_context = do_lang('IN', get_translated_text($page_title));
                return $written_context;

            case 'WIKI_EDIT_POST':
                $page_title = $GLOBALS['SITE_DB']->query_select_value_if_there('wiki_pages', 'title', array('id' => intval($actionlog_row['param_b'])));
                if ($page_title === null) {
                    return '#' . $actionlog_row['param_a'];
                }
                $member_id = $GLOBALS['SITE_DB']->query_select_value_if_there('wiki_posts', 'submitter', array('id' => intval($actionlog_row['param_a'])));
                if ($member_id !== null) {
                    $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
                    if ($username === null) {
                        $username = do_lang('UNKNOWN');
                    }
                } else {
                    $username = do_lang('UNKNOWN');
                }
                require_lang('wiki');
                $written_context = do_lang('POST_BY_X_IN_Y', $username, get_translated_text($page_title));
                return $written_context;

            case 'WIKI_MOVE_POST':
                $page_title = $GLOBALS['SITE_DB']->query_select_value_if_there('wiki_pages', 'title', array('id' => intval($actionlog_row['param_b'])));
                if ($page_title === null) {
                    return '#' . $actionlog_row['param_a'];
                }
                $written_context = do_lang('SOMETHING_MOVED', '#' . $actionlog_row['param_a'], get_translated_text($page_title));
                return $written_context;
        }

        return parent::get_written_context($actionlog_row, $handler_data);
    }
}
