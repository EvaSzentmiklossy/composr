<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core_themeing
 */

/**
 * Hook class.
 */
class Hook_choose_theme_files
{
    /**
     * Run function for ajax-tree hooks. Generates XML for a tree list, which is interpreted by JavaScript and expanded on-demand (via new calls).
     *
     * @param  ?ID_TEXT $id The ID to do under (null: root)
     * @param  array $options Options being passed through
     * @param  ?ID_TEXT $default The ID to select by default (null: none)
     * @return string XML in the special category,entry format
     */
    public function run($id, $options, $default = null)
    {
        if (!has_actual_page_access(get_member(), 'admin_themes', get_module_zone('admin_themes'))) {
            access_denied('I_ERROR');
        }

        $theme = get_param_string('theme');

        $out = '';

        require_lang('themes');
        require_code('themes2');
        require_code('files');

        if (is_null($id)) {
            $top_level = array(
                'templates' => array(do_lang('TEMPLATES_HTML'), 'DOC_TEMPLATES'),
                'css' => array(do_lang('TEMPLATES_CSS'), 'DOC_CSS'),
                'javascript' => array(do_lang('TEMPLATES_JAVASCRIPT'), 'DOC_TEMPLATES_JAVASCRIPT'),
                'xml' => array(do_lang('TEMPLATES_XML'), 'DOC_TEMPLATES_XML'),
                'text' => array(do_lang('TEMPLATES_TEXT'), 'DOC_TEMPLATES_TEXT'),
            );

            $test = $GLOBALS['SITE_DB']->query_select_value('theme_screen_tree', 'COUNT(*)');
            if ($test >= 0) {
                $top_level['screens'] = array(do_lang('SCREEN_TREES'), 'DOC_TEMPLATE_EDITOR_SCREENS');
            }

            $zones = find_all_zones(false, true, false, 0, 10);
            if (count($zones) < 10) {
                foreach ($zones as $zone_details) {
                    $top_level[$zone_details[0] . ':'] = array(do_lang('ZONE_IS', $zone_details[1]), 'DOC_TEMPLATE_EDITOR_COMCODE_PAGES');
                }
            }

            foreach ($top_level as $_id => $_bits) {
                list($title, $description_lang_string) = $_bits;
                $description_html = comcode_lang_string($description_lang_string);

                $out .= '
                <category
                    id="' . xmlentities($this->get_next_id()) . '"
                    serverid="' . xmlentities($_id) . '"
                    title="' . xmlentities($title) . '"
                    has_children="true"
                    selectable="false"
                    description_html="' . xmlentities($description_html->evaluate()) . '"
                ></category>';
            }
        } else {
            switch ($id) {
                case 'templates':
                case 'css':
                case 'javascript':
                case 'xml':
                case 'text':
                    $subdir = $id;

                    $action_log_times = $this->load_actionlog_times_templates($theme);

                    $template_files = get_template_files_list($theme, $subdir);
                    foreach (array_keys($template_files) as $_template_file) {
                        $template_file_path = find_template_path($_template_file, $subdir, $theme);
                        if (empty($template_file_path)) {
                            continue;
                        }
                        $template_file = $subdir . '/' . $_template_file;

                        $description_html = $this->get_template_details_table($theme, $template_file, $template_file_path, $action_log_times);

                        $out .= '
                        <entry
                            id="' . xmlentities($this->get_next_id()) . '"
                            serverid="' . xmlentities($template_file) . '"
                            title="' . xmlentities($_template_file) . '"
                            selectable="true"
                            description_html="' . xmlentities($description_html->evaluate()) . '"
                        ></entry>';
                    }
                    break;

                case 'screens':
                    $screens = $GLOBALS['SITE_DB']->query_select('theme_screen_tree', array('page_link'), null, 'ORDER BY page_link');
                    foreach ($screens as $screen) {
                        $page_link = $screen['page_link'];

                        $out .= '
                        <category
                            id="' . xmlentities($this->get_next_id()) . '"
                            serverid="' . xmlentities($page_link) . '"
                            title="' . xmlentities($page_link) . '"
                            has_children="true"
                            selectable="false"
                        ></category>';
                    }
                    break;

                default:
                    if (strpos(rtrim($id, ':'), ':') !== false) {
                        // Must be a screen show meta-tree...

                        $json_tree = $GLOBALS['SITE_DB']->query_select_value('theme_screen_tree', 'json_tree', array('page_link' => $id));
                        $tree = json_decode($json_tree, true);
                        $out .= $this->build_screen_tree($theme, $tree);
                    } else {
                        // Must be a zone, show pages in it...

                        $zone = rtrim($id, ':');

                        $action_log_times = $this->load_actionlog_times_pages($zone);

                        $pages = find_all_pages_wrap($zone, false, false, FIND_ALL_PAGES__PERFORMANT, 'comcode');
                        ksort($pages);
                        foreach (array_keys($pages) as $page) {
                            if (is_integer($page)) {
                                $page = strval($page);
                            }

                            list(, , $path) = find_comcode_page(get_site_default_lang(), $page, $zone);

                            $description_html = $this->get_comcode_page_details_table($page, $zone, $path, $action_log_times);

                            $out .= '
                            <entry
                                id="' . xmlentities($this->get_next_id()) . '"
                                serverid="' . xmlentities($zone . ':' . $page) . '"
                                title="' . xmlentities($page) . '"
                                selectable="true"
                                description_html="' . xmlentities($description_html->evaluate()) . '"
                            ></entry>';
                        }
                    }
                    break;
            }
        }

        return '<result>' . $out . '</result>';
    }

    /**
     * Find what addons templates are.
     *
     * @return array Map of template file to addon
     */
    private function templates_for_addons()
    {
        static $templates_for_addons = null;
        if ($templates_for_addons !== null) {
            return $templates_for_addons;
        }

        $templates_for_addons = array();
        $addons = find_all_hooks('systems', 'addon_registry');
        foreach (array_keys($addons) as $addon) {
            require_code('hooks/systems/addon_registry/' . $addon);
            $ob = object_factory('Hook_addon_registry_' . $addon);
            $_files = $ob->get_file_list();

            foreach (array('templates', 'css', 'javascript', 'xml', 'text') as $subdir) {
                $test_for = 'themes/default/' . $subdir . '/';
                $test_for_2 = 'themes/default/' . $subdir . '_custom/';
                foreach ($_files as $file_path) {
                    if (substr($file_path, 0, strlen($test_for)) == $test_for || substr($file_path, 0, strlen($test_for_2)) == $test_for_2) {
                        $file = basename($file_path);

                        if (($file != 'index.html') && ($file != '.htaccess')) {
                            $templates_for_addons[$subdir . '/' . $file] = $addon;
                        }
                    }
                }
            }
        }
        return $templates_for_addons;
    }

    /**
     * Find action-log details that show edit data for templates.
     *
     * @param  ID_TEXT $theme Theme being used
     * @param  ?ID_TEXT $filter The template file to get this for (null: all)
     * @return array Action-log details
     */
    private function load_actionlog_times_templates($theme, $filter = null)
    {
        $where = array('the_type' => 'EDIT_TEMPLATE', 'param_b' => $theme);
        if ($filter !== null) {
            $where['param_a'] = $filter;
        }
        $_action_log_times = $GLOBALS['SITE_DB']->query_select('actionlogs', array('MAX(date_and_time)', 'param_a', 'member_id'), $where, 'GROUP BY param_a');
        $action_log_times = list_to_map('param_a', $_action_log_times);
        return $action_log_times;
    }

    /**
     * Find action-log details that show edit data for pages.
     *
     * @param  ID_TEXT $zone Zone being used
     * @param  ?ID_TEXT $filter The page file to get this for (null: all)
     * @return array Action-log details
     */
    private function load_actionlog_times_pages($zone, $filter = null)
    {
        $where = array('the_type' => 'COMCODE_PAGE_EDIT', 'param_b' => $zone);
        if ($filter !== null) {
            $where['param_a'] = $filter;
        }
        $_action_log_times = $GLOBALS['SITE_DB']->query_select('actionlogs', array('MAX(date_and_time)', 'param_a', 'member_id'), $where, 'GROUP BY param_a');
        $action_log_times = list_to_map('param_a', $_action_log_times);
        return $action_log_times;
    }

    /**
     * Show details for a template file.
     *
     * @param  ID_TEXT $theme Theme being used
     * @param  ID_TEXT $template_file The template file to show for
     * @param  PATH $template_file_path Path to the template file
     * @param  ?array $action_log_times Combined map of action-log details (null: look-up)
     * @return Tempcode Details
     */
    private function get_template_details_table($theme, $template_file, $template_file_path, $action_log_times = null)
    {
        $templates_for_addons = $this->templates_for_addons();

        if ($action_log_times === null) {
            $action_log_times = $this->load_actionlog_times_templates($theme, $template_file);
        }

        return do_template('THEME_EDITOR_TEMPLATE_DETAIL', array(
            'FILE' => $template_file,
            'FULL_PATH' => $template_file_path,
            'LAST_EDITING_USERNAME' => isset($action_log_times[$template_file]) ? $GLOBALS['FORUM_DRIVER']->get_username($action_log_times[$template_file]['member_id']) : null,
            'LAST_EDITING_DATE' => (filectime($template_file_path) == filemtime($template_file_path)) ? null : get_timezoned_date(filemtime($template_file_path)),
            'FILE_SIZE' => clean_file_size(filesize($template_file_path)),
            'ADDON' => isset($templates_for_addons[$template_file]) ? $templates_for_addons[$template_file] : null,
        ));
    }

    /**
     * Show details for a Comcode page file.
     *
     * @param  ID_TEXT $page Page name
     * @param  ID_TEXT $zone Zone the page is in
     * @param  PATH $path Path to page
     * @param  ?array $action_log_times Combined map of action-log details (null: look-up)
     * @return Tempcode Details
     */
    private function get_comcode_page_details_table($page, $zone, $path, $action_log_times = null)
    {
        if ($action_log_times === null) {
            $action_log_times = $this->load_actionlog_times_pages($zone, $page);
        }

        return do_template('THEME_EDITOR_TEMPLATE_DETAIL', array(
            'FILE' => $zone . ':' . $page,
            'FULL_PATH' => $path,
            'LAST_EDITING_USERNAME' => isset($action_log_times[$page]) ? $GLOBALS['FORUM_DRIVER']->get_username($action_log_times[$page]['member_id']) : null,
            'LAST_EDITING_DATE' => (filectime($path) == filemtime($path)) ? null : get_timezoned_date(filemtime($path)),
            'FILE_SIZE' => clean_file_size(filesize($path)),
            'ADDON' => null,
        ));
    }

    /**
     * Build screen tree from a meta-tree node.
     *
     * @param  ID_TEXT $theme The theme we are working with
     * @param  array $node Node
     * @return string XML
     */
    private function build_screen_tree($theme, $node)
    {
        if ($node['type'] == 'template') {
            $file = $node['subdir'] . '/' . $node['name'];

            $file_path = find_template_path($node['name'], $node['subdir'], $theme);
            if (empty($file_path)) {
                return '';
            }

            $description_html = $this->get_template_details_table($theme, $file, $file_path);
        } elseif ($node['type'] == 'comcode_page') {
            $file = $node['name'];
            $parts = explode(':', $file);
            $page = $parts[1];
            $zone = $parts[0];

            list(, , $file_path) = find_comcode_page(get_site_default_lang(), $page, $zone);
            if (empty($file_path)) {
                return '';
            }

            $description_html = $this->get_comcode_page_details_table($page, $zone, $file_path);
        } else {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }

        if ($description_html === null) {
            return '';
        }

        $children = '';
        $num_children = 0;
        foreach ($node['children'] as $_child) {
            $child = $this->build_screen_tree($theme, $_child);
            if ($child != '') {
                $children .= $child;
                $num_children++;
            }
        }
        $has_children = ($num_children > 0);

        $tag_type = $has_children ? 'category' : 'entry';

        return '
        <' . $tag_type . '
            id="' . xmlentities($this->get_next_id()) . '"
            serverid="' . xmlentities($file) . '"
            title="' . xmlentities(basename($file)) . '"
            selectable="true"
            description_html="' . xmlentities($description_html->evaluate()) . '"
            has_children="' . ($has_children ? 'true' : 'false') . '"
            expanded="' . ($has_children ? 'true' : 'false') . '"
        >' . $children . '</' . $tag_type . '>';
    }

    /**
     * Get next unique ID.
     *
     * @return string ID
     */
    private function get_next_id()
    {
        static $counter = 0;
        $counter++;
        return 'screen_node_' . strval($counter) . '_' . md5(serialize($_GET));
    }
}

