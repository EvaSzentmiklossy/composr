<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Hook class.
 */
class Hook_payment_gateway_authorize
{
    // Requires:
    //  the live login is the Composr Composr "Gateway username" option
    //  the testing login is the Composr "Testing mode gateway username" option
    //  the transaction key is the Composr "Gateway digest code" option; it may be blank ; if they are different for the live and testing logins then separate them with ";"

    /**
     * Get authorize access detail
     *
     * @return array A pair: login username, transaction key
     */
    protected function _get_access_details()
    {
        $api_login = ecommerce_test_mode() ? get_option('payment_gateway_test_username') : get_option('payment_gateway_username');

        $payment_gateway_digest_bits = explode(';', get_option('payment_gateway_digest'));
        if (!isset($payment_gateway_digest_bits[1])) {
            $payment_gateway_digest_bits[1] = $payment_gateway_digest_bits[0];
        }
        $api_transaction_key = ecommerce_test_mode() ? trim($payment_gateway_digest_bits[1]) : trim($payment_gateway_digest_bits[0]);

        return array($api_login, $api_transaction_key);
    }

    /**
     * Calculate fingerprint for form.
     *
     * @param  string $loginid Login Id.
     * @param  string $x_tran_key Transaction key
     * @param  float $amount A transaction amount.
     * @param  integer $sequence Sequence number.
     * @param  integer $timestamp Timestamp
     * @param  ID_TEXT $currency The currency to use.
     * @return ARRAY
     */
    protected function _get_finger_print($loginid, $x_tran_key, $amount, $sequence, $timestamp, $currency)
    {
        return $this->_hmac($x_tran_key, $loginid . '^' . strval($sequence) . '^' . strval($timestamp) . '^' . float_to_raw_string($amount) . '^' . $currency);
    }

    /**
     * HMAC helper function.
     *
     * @param  string $key Transaction key
     * @param  string $data Data.
     * @return string Encrypted data.
     */
    protected function _hmac($key, $data)
    {
        // RFC 2104 HMAC implementation for php.
        // Creates an md5 HMAC.
        // Eliminates the need to install mhash to compute a HMAC
        // Hacked by Lance Rushing
        $b = 64; // byte length for md5
        if (strlen($key) > $b) {
            $key = pack('H*', md5($key));
        }
        $key = str_pad($key, $b, chr(0x00));
        $ipad = str_pad('', $b, chr(0x36));
        $opad = str_pad('', $b, chr(0x5c));
        $k_ipad = $key ^ $ipad;
        $k_opad = $key ^ $opad;

        return md5($k_opad . pack('H*', md5($k_ipad . $data)));
    }

    /**
     * Get the remote form URL.
     *
     * @return URLPATH The remote form URL.
     */
    protected function _get_remote_form_url()
    {
        return ecommerce_test_mode() ? 'https://test.authorize.net/gateway/transact.dll' : 'https://secure.authorize.net/gateway/transact.dll';
    }

    /**
     * Get the card/gateway logos and other gateway-required details.
     *
     * @return Tempcode The stuff.
     */
    public function get_logos()
    {
        // TODO: Force CSP off on v11

        return do_template('ECOM_LOGOS_AUTHORIZE', array('_GUID' => '5b3254b330b3b1719d66d2b754c7a8c8'));
    }

    /**
     * Get additional gateway details we want to display.
     *
     * @return Tempcode The stuff.
     */
    public function get_payment_processor_links()
    {
        return do_template('ECOM_PAYMENT_PROCESSOR_LINKS_AUTHORIZE', array('_GUID' => '563254b330b3b1719d66d2b754c7a8c8'));
    }

    /**
     * Generate a transaction ID.
     *
     * @return string A transaction ID.
     */
    public function generate_trans_id()
    {
        require_code('crypt');
        return get_rand_password();
    }

    /**
     * Make a transaction (payment) button.
     *
     * @param  ID_TEXT $type_code The product codename.
     * @param  SHORT_TEXT $item_name The human-readable product title.
     * @param  ID_TEXT $purchase_id The purchase ID.
     * @param  float $amount A transaction amount.
     * @param  ID_TEXT $currency The currency to use.
     * @return Tempcode The button.
     */
    public function make_transaction_button($type_code, $item_name, $purchase_id, $amount, $currency)
    {
        list($loginid, $transaction_key) = $this->_get_access_details();

        $form_url = $this->_get_remote_form_url();

        $timestamp = time();

        $sequence = mt_rand(1, mt_getrandmax());

        // Insert the form elements required for SIM
        $fingerprint = $this->_get_finger_print($loginid, $transaction_key, $amount, $sequence, $time_stamp, $currency);

        $GLOBALS['SITE_DB']->query_insert('trans_expecting', array(
            'id' => $trans_id,
            'e_type_code' => $type_code,
            'e_purchase_id' => $purchase_id,
            'e_item_name' => $item_name,
            'e_member_id' => get_member(),
            'e_amount' => float_to_raw_string($amount),
            'e_currency' => $currency,
            'e_ip_address' => get_ip_address(),
            'e_session_id' => get_session_id(),
            'e_time' => time(),
            'e_length' => null,
            'e_length_units' => '',
        ));

        return do_template('ECOM_TRANSACTION_BUTTON_VIA_AUTHORIZE', array(
            'TYPE_CODE' => $type_code,
            'FORM_URL' => $form_url,
            'SEQUENCE' => strval($sequence),
            'TIMESTAMP' => strval($timestamp),
            'FINGERPRINT' => $fingerprint,
            'PURCHASE_ID' => $purchase_id,
            'LOGINID' => $loginid,
            'AMOUNT' => float_to_raw_string($amount),
            'IS_TEST' => ecommerce_test_mode(),
            'CUST_ID' => strval(get_member()),
            'CURRENCY' => $currency,
        ));
    }

    /**
     * Make a subscription (payment) button.
     *
     * @param  ID_TEXT $type_code The product codename.
     * @param  SHORT_TEXT $item_name The human-readable product title.
     * @param  ID_TEXT $purchase_id The purchase ID.
     * @param  float $amount A transaction amount.
     * @param  integer $length The subscription length in the units.
     * @param  ID_TEXT $length_units The length units.
     * @set    d w m y
     * @param  ID_TEXT $currency The currency to use.
     * @return Tempcode The button.
     */
    public function make_subscription_button($type_code, $item_name, $purchase_id, $amount, $length, $length_units, $currency)
    {
        // TODO
    }

    /**
     * Make a subscription cancellation button.
     *
     * @param  ID_TEXT $purchase_id The purchase ID.
     * @return Tempcode The button.
     */
    public function make_cancel_button($purchase_id)
    {
        return do_template('ECOM_SUBSCRIPTION_CANCEL_BUTTON_VIA_AUTHORIZE', array('_GUID' => '191d7449161eb5c4f6129cf89e5e8e7e', 'PURCHASE_ID' => $purchase_id));
    }

    /**
     * Find whether the hook auto-cancels (if it does, auto cancel the given subscription).
     *
     * @param  AUTO_LINK $subscription_id ID of the subscription to cancel.
     * @return ?boolean True: yes. False: no. (null: cancels via a user-URL-directioning)
     */
    public function auto_cancel($subscription_id)
    {
        $temp = $GLOBALS['SITE_DB']->query_select_value('subscriptions', 's_auto_fund_key', array('id' => $subscription_id));
        $data = unserialize($temp);
        $authorize_subscription_id = $data['id'];

        $this->_set_cancelation_api_parameters($authorize_subscription_id);

        $response = http_download_file($this->url, null, true, false, 'Composr', array($this->api_parameters), null, null, null, null, null, null, null, 12.0, true); // TODO: Update in v11

        if ($response !== null) {
            $response_result = $this->parse_return($response);
            $success = ($response_result[0] == 'OK') ? true : false;
            $result = array($success, $response_result[1], $response_result[2], $response_result[3]);
        } else {
            $success = false;
            $result = array(false, null, null, null);
        }

        return $success;
    }

    /**
     * This function defines the parameters needed to make a cancelation API call.
     *
     * @param AUTO_LINK $subscription_id Subscription ID
     */
    protected function _set_cancelation_api_parameters($subscription_id)
    {
        list($loginid, $transaction_key) = $this->_get_access_details();

        if (ecommerce_test_mode()) {
            //URL for test account
            $this->url = "https://apitest.authorize.net/xml/v1/request.api";
        } else {
            //URL for live account
            $this->url = "https://api.authorize.net/xml/v1/request.api";
        }

        $this->api_parameters =
            "<ARBCancelSubscriptionRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">" .
            "<merchantAuthentication>" .
            "<name>" . $loginid . "</name>" .
            "<transactionKey>" . $transaction_key . "</transactionKey>" .
            "</merchantAuthentication>" .
            "<subscriptionId>" . $subscription_id . "</subscriptionId>" .
            "</ARBCancelSubscriptionRequest>";
    }

    /**
     * Find a transaction fee from a transaction amount. Regular fees aren't taken into account.
     *
     * @param  float $amount A transaction amount.
     * @return float The fee.
     */
    public function get_transaction_fee($amount)
    {
        return 0.3 + 0.029 * $amount;
    }

    /**
     * Perform a transaction.
     *
     * @param  ?ID_TEXT $trans_id The transaction ID (null: generate one).
     * @param  SHORT_TEXT $cardholder_name Cardholder name.
     * @param  SHORT_TEXT $card_type Card Type.
     * @set    "Visa" "Master Card" "Switch" "UK Maestro" "Maestro" "Solo" "Delta" "American Express" "Diners Card" "JCB"
     * @param  SHORT_TEXT $card_number Card number.
     * @param  SHORT_TEXT $card_start_date Card Start date.
     * @param  SHORT_TEXT $card_expiry_date Card Expiry date.
     * @param  integer $card_issue_number Card Issue number.
     * @param  SHORT_TEXT $card_cv2 Card CV2 number (security number).
     * @param  SHORT_TEXT $amount Transaction amount.
     * @param  ID_TEXT $currency The currency
     * @param  LONG_TEXT $billing_street_address Street address (billing, i.e. AVS)
     * @param  SHORT_TEXT $billing_city Town/City (billing, i.e. AVS)
     * @param  SHORT_TEXT $billing_county County (billing, i.e. AVS)
     * @param  SHORT_TEXT $billing_state State (billing, i.e. AVS)
     * @param  SHORT_TEXT $billing_post_code Postcode/Zip (billing, i.e. AVS)
     * @param  SHORT_TEXT $billing_country Country (billing, i.e. AVS)
     * @param  SHORT_TEXT $shipping_firstname First name (shipping)
     * @param  SHORT_TEXT $shipping_lastname Last name (shipping)
     * @param  LONG_TEXT $shipping_street_address Street address (shipping)
     * @param  SHORT_TEXT $shipping_city Town/City (shipping)
     * @param  SHORT_TEXT $shipping_county County (shipping)
     * @param  SHORT_TEXT $shipping_state State (shipping)
     * @param  SHORT_TEXT $shipping_post_code Postcode/Zip (shipping)
     * @param  SHORT_TEXT $shipping_country Country (shipping)
     * @param  SHORT_TEXT $shipping_email E-mail address (shipping)
     * @param  SHORT_TEXT $shipping_phone Phone number (shipping)
     * @param  ?integer $length The subscription length in the units. (null: not a subscription)
     * @param  ?ID_TEXT $length_units The length units. (null: not a subscription)
     * @set    d w m y
     * @return array A tuple: success (boolean), trans-ID (string), message (string), raw message (string).
     */
    public function do_local_transaction($trans_id, $cardholder_name, $card_type, $card_number, $card_start_date, $card_expiry_date, $card_issue_number, $card_cv2, $amount, $currency, $billing_street_address, $billing_city, $billing_county, $billing_state, $billing_post_code, $billing_country, $shipping_firstname = '', $shipping_lastname = '', $shipping_street_address = '', $shipping_city = '', $shipping_county = '', $shipping_state = '', $shipping_post_code = '', $shipping_country = '', $shipping_email = '', $shipping_phone = '', $length = null, $length_units = null)
    {
        // TODO
    }

    /**
     * Handle IPN's. The function may produce output, which would be returned to the Payment Gateway. The function may do transaction verification.
     *
     * @return array A long tuple of collected data. Emulates some of the key variables of the PayPal IPN response.
     */
    public function handle_ipn_transaction()
    {
        // TODO
    }

    /**
     * Store shipping address for orders.
     *
     * @param  AUTO_LINK $order_id Order ID.
     * @return ?mixed Address ID (null: No address record found).
     */
    public function store_shipping_address($order_id)
    {
        if ($GLOBALS['SITE_DB']->query_select_value_if_there('shopping_order_addresses', 'id', array('order_id' => $order_id)) === null) {
            $shipping_address = array(
                'order_id' => $order_id,
                'firstname' => trim(post_param_string('x_ship_to_first_name', '') . ', ' . post_param_string('x_ship_to_company', ''), ' ,'),
                'lastname' => post_param_string('x_ship_to_last_name', ''),
                'street_address' => post_param_string('x_ship_to_address', ''),
                'city' => post_param_string('x_ship_to_city', ''),
                'county' => '',
                'state' => post_param_string('x_ship_to_state', ''),
                'post_code' => post_param_string('x_ship_to_zip', ''),
                'country' => post_param_string('x_ship_to_country', ''),
                'email' => post_param_string('x_email', ''),
                'phone' => post_param_string('x_phone', ''),
            );
            return $GLOBALS['SITE_DB']->query_insert('shopping_order_addresses', $shipping_address, true);
        }
    }
}
