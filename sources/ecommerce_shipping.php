<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Get the base shipping cost for the shopping cart.
 *
 * @return float Base shipping cost.
 */
function get_base_shipping_cost()
{
    static $ret = null;

    if ($ret === null) {
        $option = get_option('shipping_cost_base');
        $ret = round(float_unformat($option), 2);
    }

    return $ret;
}

/**
 * Recalculate shipping cost based on customer context.
 *
 * @param  array $products_in_cart List of product specifiers.
 * @param  ?MEMBER $member_id The member this is for (null: current member).
 * @return REAL The shipping cost.
 */
function recalculate_shipping_cost_combo($products_in_cart, $member_id = null)
{
    // ADD CUSTOM CODE HERE BY OVERRIDING THIS FUNCTION

    $shipping_cost = get_base_shipping_cost();
    foreach ($products_in_cart as $_product) {
        list($product, $quantity) = $_product;

        list($details) = find_product_details($product['type_code']);

        recalculate_shipping_cost($product, $details['shipping_cost'] - get_base_shipping_cost(), $member_id, $quantity);
    }

    return $shipping_cost;
}

/**
 * Recalculate shipping cost based on customer context.
 *
 * @param  ?array $details Map of product details (null: it's for base shipping cost only).
 * @param  REAL $shipping_cost The default shipping cost.
 * @param  ?MEMBER $member_id The member this is for (null: current member).
 * @param  integer $quantity The quantity of items.
 * @return REAL The shipping cost.
 */
function recalculate_shipping_cost($details, $shipping_cost, $member_id = null, $quantity = 1)
{
    // ADD CUSTOM CODE HERE BY OVERRIDING THIS FUNCTION

    return $shipping_cost * $quantity;
}

/**
 * Get form fields for a shipping/invoice address.
 *
 * @param  string $shipping_email E-mail address.
 * @param  string $shipping_phone Phone number.
 * @param  string $shipping_firstname First name.
 * @param  string $shipping_lastname Last name.
 * @param  string $shipping_street_address Street address.
 * @param  string $shipping_city Town/City.
 * @param  string $shipping_county County.
 * @param  string $shipping_state State.
 * @param  string $shipping_post_code Postcode/Zip.
 * @param  string $shipping_country Country.
 * @param  boolean $require_all_details Whether to require all details to be input.
 * @return Tempcode Address fields.
 */
function get_shipping_address_fields($shipping_email, $shipping_phone, $shipping_firstname, $shipping_lastname, $shipping_street_address, $shipping_city, $shipping_county, $shipping_state, $shipping_post_code, $shipping_country, $require_all_details = true)
{
    $fields = new Tempcode();

    $fields->attach(get_shipping_name_fields($shipping_firstname, $shipping_lastname, $require_all_details));
    $fields->attach(get_address_fields('shipping_', $shipping_street_address, $shipping_city, $shipping_county, $shipping_state, $shipping_post_code, $shipping_country, $require_all_details));
    $fields->attach(get_shipping_contact_fields($shipping_email, $shipping_phone, $require_all_details));

    return $fields;
}

/**
 * Get form fields for a shipping/invoice address.
 *
 * @param  string $shipping_firstname First name.
 * @param  string $shipping_lastname Last name.
 * @param  boolean $require_all_details Whether to require all details to be input.
 * @return Tempcode Name fields.
 */
function get_shipping_name_fields($shipping_firstname, $shipping_lastname, $require_all_details = true)
{
    $fields = new Tempcode();

    $fields->attach(form_input_line(do_lang_cpf('firstname'), '', 'shipping_firstname', $shipping_firstname, $require_all_details));
    $fields->attach(form_input_line(do_lang_cpf('lastname'), '', 'shipping_lastname', $shipping_lastname, $require_all_details));

    return $fields;
}

/**
 * Get form fields for a shipping/invoice address.
 *
 * @param  string $shipping_email E-mail address.
 * @param  string $shipping_phone Phone number.
 * @param  boolean $require_all_details Whether to require all details to be input.
 * @return Tempcode Contact fields.
 */
function get_shipping_contact_fields($shipping_email, $shipping_phone, $require_all_details = true)
{
    $fields = new Tempcode();

    $fields->attach(form_input_email(do_lang_tempcode('EMAIL_ADDRESS'), '', 'shipping_email', $shipping_email, $require_all_details));
    $fields->attach(form_input_line(do_lang_tempcode('PHONE_NUMBER'), '', 'shipping_phone', $shipping_phone, $require_all_details));

    return $fields;
}

/**
 * Store shipping address for a transaction.
 * We try and merge it with one we already have on record in a sensible way.
 *
 * @param  ID_TEXT $trans_expecting_id Expected transaction ID.
 * @param  ID_TEXT $txn_id Transaction ID (blank: not set yet).
 * @param  ?array $shipping_address Shipping address (null: get from POST parameters).
 * @return ?AUTO_LINK Address ID (null: none saved).
 */
function store_shipping_address($trans_expecting_id, $txn_id = '', $shipping_address = null)
{
    $field_groups = array(
        array('a_firstname', 'a_lastname'),
        array('a_street_address', 'a_city', 'a_county', 'a_state', 'a_post_code', 'a_country'),
        array('a_email'),
        array('a_phone'),
    );

    if ($shipping_address === null) {
        $shipping_address = array();
        foreach ($field_groups as $field_group) {
            foreach ($field_group as $field) {
                $_field = substr($field, 2);
                $shipping_address[$field] = post_param_string('shipping_' . $_field, '');
            }
        }
        if (implode('', $shipping_address) == '') {
            return null;
        }
    }

    $existing = $GLOBALS['SITE_DB']->query_select('ecom_trans_addresses', array('*'), array('a_trans_expecting_id' => $trans_expecting_id), '', 1);
    if (array_key_exists(0, $existing)) {
        $e = $existing[0];

        foreach ($field_groups as $field_group) {
            $is_empty_new = true;
            foreach ($field_group as $field) {
                if ($shipping_address[$field] != '') {
                    $is_empty_new = false;
                    break;
                }
            }

            if ($is_empty_new) {
                $is_empty_existing = true;
                foreach ($field_group as $field) {
                    if ($e[$field] != '') {
                        $is_empty_existing = false;
                        break;
                    }
                }

                if (!$is_empty_existing) {
                    foreach ($field_group as $field) {
                        $shipping_address[$field] = $e[$field];
                    }
                }
            }
        }

        $GLOBALS['SITE_DB']->query_delete('ecom_trans_addresses', array('a_trans_expecting_id' => $trans_expecting_id), '', 1);
    }

    $more = array(
        'a_trans_expecting_id' => $trans_expecting_id,
        'a_txn_id' => $txn_id,
    );
    return $GLOBALS['SITE_DB']->query_insert('ecom_trans_addresses', $shipping_address + $more, true);
}
