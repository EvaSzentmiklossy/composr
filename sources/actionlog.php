<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__actionlog()
{
    define('ACTIONLOG_FLAGS_NONE', 0);
    define('ACTIONLOG_FLAG__USER_ACTION', 1); // Used when we use the action log for non-admin actions (as we have no dedicated log for something)
}

abstract class Hook_actionlog
{
    /**
     * Get extended action log details if the action log entry type is handled by this hook and we have them.
     *
     * @param  array Action log row
     * @return ?array Map of extended data in standard format (null: not available from this hook) (false: hook has responsibility but has failed)
     */
    public function get_extended_actionlog_data($actionlog_row)
    {
        $handlers = $this->get_handlers();

        $type = $actionlog_row['the_type'];

        if (array_key_exists($type, $handlers)) {
            $handler_data = $handlers[$type];

            $identifier = null;
            if ($handler_data['identifier_index'] === 0) {
                $identifier = $actionlog_row['param_a'];
            } elseif ($handler_data['identifier_index'] === 1) {
                $identifier = $actionlog_row['param_b'];
            }
            if ($identifier === '') {
                // Fail (note null does not fail, it just means we have no identifier which is fine)
                return false
            }

            $written_context = null;
            if ($handler_data['written_context_index'] === 0) {
                $written_context = $actionlog_row['param_a'];
            } elseif ($handler_data['written_context_index'] === 1) {
                $written_context = $actionlog_row['param_b'];
            }
            if ($written_context === null && $identifier !== null && $handler_data['cma_hook'] !== null) {
                // Work out from CMA hook as we don't have it directly in the action log entry
                require_code('content');
                list($written_context) = content_get_details($handler_data['cma_hook'], $content_id);
            }
            if ($written_context === null || $written_context === '') {
                // Fail
                return false;
            }

            $bindings = array(
                'ID' => $identifier,
                '0' => ($actionlog_row['param_a'] == '') ? null : $actionlog_row['param_a'],
                '1' => ($actionlog_row['param_b'] == '') ? null : $actionlog_row['param_b'],
                '0_EVEN_EMPTY' => $actionlog_row['param_a'],
                '1_EVEN_EMPTY' => $actionlog_row['param_b'],
            );

            $followup_page_links = array();
            $_followup_page_links = $handler_data['followup_page_links'];
            foreach ($_followup_page_links as $i => $page_link) {
                if ($page_link !== null) {
                    $error = false;
                    foreach ($bindings as $binding_from => $binding_to) {
                        $_binding_from = '{' . $binding_from . '}';
                        if (strpos($page_link, $_binding_from) !== false) {
                            if ($binding_to !== null) {
                                $page_link = str_replace($_binding_from, $binding_to, $page_link);
                            } else {
                                $error = true;
                            }
                        }
                    }

                    if (!$error) {
                        $followup_page_links[] = $page_link;
                    }
                }
            }

            return array(
                'written_context' => $written_context,
                'followup_page_links' => $followup_page_links,
            );
        }

        return null;
    }

    /**
     * Get details of action log entry types handled by this hook. For internal use, although may be used by the base class.
     *
     * @return array Map of handler data in standard format
     */
    protected function get_handlers()
    {
        return array();
    }
}

/**
 * Try and make an action log entry into a proper link.
 *
 * @param  ID_TEXT $type Action type
 * @param  string $a First parameter
 * @param  string $b Second parameter
 * @param  Tempcode $_a First parameter (cropped)
 * @param  Tempcode $_b Second parameter (cropped)
 * @return ?array Pair: first parameter as possible link, second parameter as possible link (null: could not construct a nice link)
 */
function actionlog_linkage($type, $a, $b, $_a, $_b)
{
    $type_str = do_lang($type, $a, $b, null, null, false);
    if (is_null($type_str)) {
        $type_str = $type;
    }

    // TODO: This will be replaced later with a more thorough system #115 on tracker
    if (($type == 'EDIT_TEMPLATES') && (strpos($a, ',') === false)) {
        if ($b == '') {
            $b = 'default';
        }
        $tmp_url = build_url(array('page' => 'admin_themes', 'type' => '_edit_templates', 'theme' => $b, 'f0file' => $a), get_module_zone('admin_themes'));
        $a = basename($a, '.tpl');
        require_code('templates_interfaces');
        $_a = tpl_crop_text_mouse_over($a, 14);
        $_a = hyperlink($tmp_url, $_a, false, false, $type_str);
        return array($_a, $_b);
    }
    if ($type == 'EDIT_CSS') {
        if ($b == '') {
            $b = 'global.css';
        }
        $tmp_url = build_url(array('page' => 'admin_themes', 'type' => 'edit_css', 'theme' => $a, 'file' => $b), get_module_zone('admin_themes'));
        $b = basename($b, '.css');
        $_b = hyperlink($tmp_url, $_b, false, false, $type_str);
        return array($_a, $_b);
    }
    if ($type == 'COMCODE_PAGE_EDIT') {
        $tmp_url = build_url(array('page' => 'cms_comcode_pages', 'type' => '_edit', 'page_link' => $b . ':' . $a), get_module_zone('cms_comcode_pages'));
        $_a = hyperlink($tmp_url, $_a, false, false, $type_str);
        return array($_a, $_b);
    }
    if ($type == 'ADD_CATALOGUE_ENTRY' || $type == 'EDIT_CATALOGUE_ENTRY') {
        $tmp_url = build_url(array('page' => 'catalogues', 'type' => 'entry', 'id' => $a), get_module_zone('catalogues'));
        $_b = hyperlink($tmp_url, ($b == '') ? $_a : $_b, false, false, $type_str);
        return array($_a, $_b);
    }
    if (($type == 'ADD_CATALOGUE_CATEGORY' || $type == 'EDIT_CATALOGUE_CATEGORY') && ($b != '')) {
        $tmp_url = build_url(array('page' => 'catalogues', 'type' => 'category', 'id' => (!is_numeric($a)) ? $b : $a), get_module_zone('catalogues'));
        $_b = hyperlink($tmp_url, $_b, false, false, $type_str);
        return array($_a, $_b);
    }

    return null; // Could not get a match
}
