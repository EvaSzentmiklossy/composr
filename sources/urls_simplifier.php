<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2018

 See text/EN/licence.txt for full licensing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Remove unnecessarily parnoid URL-encoding if needed, so the given URL will fit in the database.
 *
 * @param  URLPATH $url The URL
 * @return URLPATH The shortened URL
 */
function _cms_rawurlrecode($url)
{
    $recoded = '';

    $parts = preg_split('#(%[\dA-F]{1,2})#i', $url, null, PREG_SPLIT_DELIM_CAPTURE);
    foreach ($parts as $i => $part) {
        if ($i % 2 == 0) {
            $recoded .= $parts[$i];
        } else {
            if (hexdec(substr($parts[$i], 1)) < 128) {
                $recoded .= $parts[$i];
            } else {
                $recoded .= rawurldecode($parts[$i]);
            }
        }
    }

    return $recoded;
}

/**
 * Class to encode/decode URLs to make them valid/readable. It is a safe operation in each direction, no amount of random conversions back/forth can corrupt.
 */
class HarmlessURLCoder
{
    private $protected_chars = null;

    /**
     * Constructor.
     */
    public function __construct()
    {
        foreach (array(
            chr(0),
            chr(1),
            chr(2),
            chr(3),
            chr(4),
            chr(5),
            chr(6),
            chr(7),
            chr(8),
            chr(9),
            chr(10),
            chr(11),
            chr(12),
            '%',
            '/',
            '?',
            ':',
            '&',
            '=',
            '@',
            '+',
            '$',
            ',',
            ';',
            '#',
        ) as $char) {
            $this->protected_chars[rawurlencode($char)] = $char;
        }
    }

    /**
     * URL-decode a string to be readable.
     *
     * @param  string $str The input string
     * @return string The decoded string
     */
    public function decode($str)
    {
        if (get_value('urls_simplifier') !== '1') { // TODO: Make a proper option in v11
            return $str;
        }

        $decoded = '';

        $str = str_replace('+', ' ', $str);
        $parts = preg_split('#(%[\dA-F]{1,2})#i', $str, null, PREG_SPLIT_DELIM_CAPTURE);
        foreach ($parts as $i => $part) {
            if ($i % 2 == 0) {
                $decoded .= $parts[$i];
            } else {
                if (isset($this->protected_chars[$parts[$i]])) {
                    $decoded .= $parts[$i];
                } else {
                    $decoded .= rawurldecode($parts[$i]);
                }
            }
        }

        return $decoded;
    }

    /**
     * URL-encode a string to be valid.
     *
     * @param  string $str The input string
     * @return string The encoded string
     */
    public function encode($str)
    {
        if (get_value('urls_simplifier') !== '1') { // TODO: Make a proper option in v11
            return $str;
        }

        $encoded = '';

        $len = strlen($str);
        for ($i = 0; $i < $len; $i++) {
            $c = $str[$i];

            if (in_array($c, $this->protected_chars)) {
                $encoded .= $c;
            } else {
                $encoded .= rawurlencode($c);
            }
        }

        return $encoded;
    }
}
