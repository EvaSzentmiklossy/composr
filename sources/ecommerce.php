<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    ecommerce
 */

/**
 * Standard code module initialisation function.
 *
 * @ignore
 */
function init__ecommerce()
{
    if (!defined('PRODUCT_PURCHASE_WIZARD')) {
        define('PRODUCT_PURCHASE_WIZARD', 0);
        define('PRODUCT_INVOICE', 1);
        define('PRODUCT_SUBSCRIPTION', 2);
        define('PRODUCT_OTHER', 3);
        define('PRODUCT_CATALOGUE', 4);
        define('PRODUCT_ORDERS', 5);

        define('ECOMMERCE_PRODUCT_AVAILABLE', 0);
        define('ECOMMERCE_PRODUCT_NO_GUESTS', 1); // Only used if current user really is a Guest
        define('ECOMMERCE_PRODUCT_ALREADY_HAS', 2);
        define('ECOMMERCE_PRODUCT_DISABLED', 3);
        define('ECOMMERCE_PRODUCT_PROHIBITED', 4);
        define('ECOMMERCE_PRODUCT_OUT_OF_STOCK', 5);
        define('ECOMMERCE_PRODUCT_MISSING', 6);
        define('ECOMMERCE_PRODUCT_INTERNAL_ERROR', 7);
    }

    require_lang('ecommerce');
}

/**
 * Check whether the system is in test mode (normally, not).
 *
 * @return boolean The answer.
 */
function ecommerce_test_mode()
{
    if (($GLOBALS['DEV_MODE']) && (get_param_integer('keep_ecommerce_local_test', 0) == 1)) {
        return true;
    }
    return (get_option('ecommerce_test_mode') == '1');
}

/**
 * Get the symbol of the currency we're trading in.
 *
 * @param  ?ID_TEXT $currency The currency (null: configured).
 * @return ID_TEXT The currency symbol.
 */
function ecommerce_get_currency_symbol($currency = null)
{
    if ($currency === null) {
        $currency = get_option('currency');
    }
    require_code('currency');
    list($symbol,) = get_currency_symbol($currency);
    return $symbol;
}

/**
 * Find a transaction fee from a transaction amount. Regular fees aren't taken into account.
 *
 * @param  float $amount A transaction amount.
 * @param  ID_TEXT $payment_gateway The payment gateway the payment went via.
 * @return float The fee
 */
function get_transaction_fee($amount, $payment_gateway)
{
    if (get_option('transaction_flat_cost') . get_option('transaction_percentage_cost') != '') {
        $fee = 0.0;
        if (get_option('transaction_flat_cost') != '') {
            $fee += floatval(get_option('transaction_flat_cost'));
        }
        if (get_option('transaction_percentage_cost') != '') {
            $fee += floatval(get_option('transaction_percentage_cost')) / 100.0 * $amount;
        }
        return round($fee, 2);
    }

    if ($payment_gateway == '') {
        return 0.0;
    }
    if ($payment_gateway == 'manual') {
        return 0.0;
    }

    if ((file_exists(get_file_base() . '/sources/hooks/systems/payment_gateway/' . $payment_gateway . '.php')) || (file_exists(get_file_base() . '/sources_custom/hooks/systems/payment_gateway/' . $payment_gateway . '.php'))) {
        require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));
        $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);
        if (method_exists($payment_gateway_object, 'get_transaction_fee')) {
            return $payment_gateway_object->get_transaction_fee($amount);
        }
    }

    return 0.0;
}

/**
 * Make a transaction (payment) button.
 *
 * @param  ID_TEXT $type_code The product codename.
 * @param  SHORT_TEXT $item_name The human-readable product title.
 * @param  ID_TEXT $purchase_id The purchase ID.
 * @param  float $amount A transaction amount.
 * @param  ID_TEXT $currency The currency to use.
 * @param  ?ID_TEXT $payment_gateway The payment gateway the payment will go via (null: autodetect).
 * @return Tempcode The button
 */
function make_transaction_button($type_code, $item_name, $purchase_id, $amount, $currency, $payment_gateway = null)
{
    if ($payment_gateway === null) {
        $payment_gateway = get_option('payment_gateway');
    }
    require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));
    $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);
    return $payment_gateway_object->make_transaction_button($type_code, $item_name, $purchase_id, $amount, $currency);
}

/**
 * Make a subscription (payment) button.
 *
 * @param  ID_TEXT $type_code The product codename.
 * @param  SHORT_TEXT $item_name The human-readable product title.
 * @param  ID_TEXT $purchase_id The purchase ID.
 * @param  float $amount A transaction amount.
 * @param  integer $length The subscription length in the units.
 * @param  ID_TEXT $length_units The length units.
 * @set    d w m y
 * @param  ID_TEXT $currency The currency to use.
 * @param  ?ID_TEXT $payment_gateway The payment gateway the payment will go via (null: autodetect).
 * @return Tempcode The button
 */
function make_subscription_button($type_code, $item_name, $purchase_id, $amount, $length, $length_units, $currency, $payment_gateway = null)
{
    if ($payment_gateway === null) {
        $payment_gateway = get_option('payment_gateway');
    }
    require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));
    $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);
    return $payment_gateway_object->make_subscription_button($type_code, $item_name, $purchase_id, $amount, $length, $length_units, $currency);
}

/**
 * Make a shopping cart payment button.
 *
 * @param  AUTO_LINK $order_id Order ID
 * @param  ID_TEXT $currency The currency to use.
 * @return Tempcode The button
 */
function make_cart_payment_button($order_id, $currency)
{
    $_items = $GLOBALS['SITE_DB']->query_select('shopping_order_details', array('p_name', 'p_price', 'p_quantity'), array('order_id' => $order_id));
    $items = array();
    foreach ($_items as $item) {
        $items[] = array(
            'PRODUCT_NAME' => $item['p_name'],
            'PRICE' => float_to_raw_string($item['p_price']),
            'QUANTITY' => strval($item['p_quantity']),
        );
    }

    $payment_gateway = get_option('payment_gateway');

    require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));

    $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);

    if (!method_exists($payment_gateway_object, 'make_cart_transaction_button')) {
        $amount = $GLOBALS['SITE_DB']->query_select_value('shopping_order', 'tot_price', array('id' => $order_id));
        return $payment_gateway_object->make_transaction_button('cart_orders', do_lang('CART_ORDER', strval($order_id)), strval($order_id), $amount, $currency);
    }

    return $payment_gateway_object->make_cart_transaction_button($items, $currency, $order_id);
}

/**
 * Make a subscription cancellation button.
 *
 * @param  AUTO_LINK $purchase_id The purchase ID.
 * @param  ID_TEXT $payment_gateway The payment gateway the payment will go via.
 * @return ?Tempcode The button (null: no special cancellation -- just delete the subscription row to stop Composr regularly re-charging)
 */
function make_cancel_button($purchase_id, $payment_gateway)
{
    if ($payment_gateway == '') {
        return null;
    }
    if ($payment_gateway == 'manual') {
        return null;
    }
    require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));
    $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);
    if (!method_exists($payment_gateway_object, 'make_cancel_button')) {
        return null;
    }
    return $payment_gateway_object->make_cancel_button($purchase_id);
}

/**
 * Send an invoice notification to a member.
 *
 * @param  MEMBER $member_id The member to send to.
 * @param  AUTO_LINK $id The invoice ID.
 */
function send_invoice_notification($member_id, $id)
{
    require_code('notifications');
    $_url = build_url(array('page' => 'invoices', 'type' => 'browse'), get_module_zone('invoices'), null, false, false, true);
    $url = $_url->evaluate();
    dispatch_notification('invoice', null, do_lang('INVOICE_SUBJECT', strval($id), null, null, get_lang($member_id)), do_notification_lang('INVOICE_MESSAGE', $url, get_site_name(), null, get_lang($member_id)), array($member_id));
}

/**
 * Find all products, except ones from hooks that might have too many to list (so don't rely on this for important backend tasks).
 *
 * @param  boolean $site_lang Whether to make sure the language for item_name is the site default language (crucial for when we read/go to third-party sales systems and use the item_name as a key).
 * @return array A list of maps of product details.
 */
function find_all_products($site_lang = false)
{
    $products = array();
    $_hooks = find_all_hook_obs('systems', 'ecommerce', 'Hook_ecommerce_');
    foreach ($_hooks as $product_object) {
        $_products = $product_object->get_products($site_lang);
        foreach ($_products as $type_code => $details) {
            if (!array_key_exists(4, $details)) {
                $details[4] = do_lang('CUSTOM_PRODUCT_' . $type_code, null, null, null, $site_lang ? get_site_default_lang() : null);
            }
            $details[] = $product_object;
            $products[$type_code] = $details;
        }
    }
    return $products;
}

/**
 * Find product.
 *
 * @param  ID_TEXT $search The item name/product codename
 * @param  boolean $site_lang Whether to make sure the language for item_name is the site default language (crucial for when we read/go to third-party sales systems and use the item_name as a key).
 * @param  boolean $search_item_names Whether $search refers to the item name rather than the product codename
 * @return ?object The product-class object (null: not found).
 */
function find_product($search, $site_lang = false, $search_item_names = false)
{
    $_hooks = find_all_hook_obs('systems', 'ecommerce', 'Hook_ecommerce_');
    foreach ($_hooks as $product_object) {
        $_products = $product_object->get_products($site_lang, $search, $search_item_names);

        $type_code = mixed();
        foreach ($_products as $type_code => $product_row) {
            if (is_integer($type_code)) {
                $type_code = strval($type_code);
            }

            if ($search_item_names) {
                if (($product_row[4] == $search) || ('_' . $type_code == $search)) {
                    return $product_object;
                }
            } else {
                if ($type_code == $search) {
                    return $product_object;
                }
            }
        }
    }
    return null;
}

/**
 * Find product info row.
 *
 * @param  ID_TEXT $search The product codename/item name
 * @param  boolean $site_lang Whether to make sure the language for item_name is the site default language (crucial for when we read/go to third-party sales systems and use the item_name as a key).
 * @param  boolean $search_item_names Whether $search refers to the item name rather than the product codename
 * @return array A pair: The product-class map, and the product codename (both will be null if not found).
 */
function find_product_row($search, $site_lang = false, $search_item_names = false)
{
    $_hooks = find_all_hook_obs('systems', 'ecommerce', 'Hook_ecommerce_');
    foreach ($_hooks as $product_object) {
        $_products = $product_object->get_products($site_lang, $search, $search_item_names);

        $type_code = mixed();
        foreach ($_products as $type_code => $product_row) {
            if (is_integer($type_code)) {
                $type_code = strval($type_code);
            }

            if ($search_item_names) {
                if (($product_row[4] == $search) || ('_' . $type_code == $search)) {
                    return array($product_row, $type_code);
                }
            } else {
                if ($type_code == $search) {
                    return array($product_row, $type_code);
                }
            }
        }
    }
    return array(null, null);
}

/**
 * Find whether local payment will be performed.
 *
 * @return boolean Whether local payment will be performed.
 */
function perform_local_payment()
{
    if (($GLOBALS['DEV_MODE']) && (get_param_integer('keep_ecommerce_local_test', 0) == 1)) {
        require_code('config2');
        set_option('payment_gateway', 'authorize');
        return true;
    }

    $payment_gateway = get_option('payment_gateway');
    require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));
    $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);
    return ((get_option('use_local_payment') == '1') && (method_exists($payment_gateway_object, 'do_local_transaction')));
}

/**
 * Get a form for transacting local payments.
 *
 * @param  ID_TEXT $type_code The product codename.
 * @param  SHORT_TEXT $item_name The item name
 * @param  ID_TEXT $purchase_id The purchase ID
 * @param  SHORT_TEXT $amount The amount
 * @param  ID_TEXT $currency The currency
 * @param  ?integer $length The length (null: not a subscription)
 * @param  ID_TEXT $length_units The length units
 * @param  ?ID_TEXT $payment_gateway The payment gateway the payment will go via (null: autodetect).
 * @param  boolean $needs_shipping_address Whether a shipping address is needed.
 * @return array A tuple: The form fields, Hidden fields, Confidence logos, Payment processor links
 */
function get_transaction_form_fields($type_code, $item_name, $purchase_id, $amount, $currency, $length, $length_units, $payment_gateway = null, $needs_shipping_address = false)
{
    if ((!tacit_https()) && (!ecommerce_test_mode())) {
        warn_exit(do_lang_tempcode('NO_SSL_SETUP'));
    }

    if ($payment_gateway === null) {
        $payment_gateway = get_option('payment_gateway');
    }

    require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));
    $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);

    if (!method_exists($payment_gateway_object, 'do_local_transaction')) {
        warn_exit(do_lang_tempcode('LOCAL_PAYMENT_NOT_SUPPORTED', escape_html($payment_gateway)));
    }

    $trans_id = $payment_gateway_object->generate_trans_id(); // gateway-compatible, probably random, transaction ID

    $GLOBALS['SITE_DB']->query_insert('trans_expecting', array(
        'id' => $trans_id,
        'e_type_code' => $type_code,
        'e_purchase_id' => $purchase_id,
        'e_item_name' => $item_name,
        'e_amount' => $amount,
        'e_currency' => $currency,
        'e_member_id' => get_member(),
        'e_ip_address' => get_ip_address(),
        'e_session_id' => get_session_id(),
        'e_time' => time(),
        'e_length' => $length,
        'e_length_units' => $length_units,
    ));

    require_code('form_templates');
    require_code('locations');

    $fields = new Tempcode();

    // Card fields...

    $shipping_email = $GLOBALS['FORUM_DRIVER']->get_member_email_address(get_member());

    if (ecommerce_test_mode()) {
        $cardholder_name = $GLOBALS['FORUM_DRIVER']->get_username(get_member());
        $card_type = 'Visa';
        $card_number = 4444333322221111;
        $card_start_date_year = intval(date('Y', utctime_to_usertime(time() - 60 * 60 * 24 * 365)));
        $card_start_date_month = intval(date('m', utctime_to_usertime(time() - 60 * 60 * 24 * 365)));
        $card_expiry_date_year = intval(date('Y', utctime_to_usertime(time() + 60 * 60 * 24 * 365)));
        $card_expiry_date_month = intval(date('m', utctime_to_usertime(time() + 60 * 60 * 24 * 365)));
        $card_issue_number = 1;
        $card_cv2 = 123;

        $billing_street_address = '3 Example Road';
        $billing_city = 'Coolborough';
        $billing_county = 'West testsome';
        $billing_state = 'England';
        $billing_post_code = 'L3 3T';
        $billing_country = 'GB';

        $shipping_firstname = 'John';
        $shipping_lastname = 'Doe';
        $shipping_street_address = '3 Example Road';
        $shipping_city = 'Coolborough';
        $shipping_county = 'West testsome';
        $shipping_state = 'England';
        $shipping_post_code = 'L3 3T';
        $shipping_country = 'GB';
        if ($shipping_email == '') {
            $shipping_email = 'test@example.com';
        }
        $shipping_phone = '01234 56789';
    } else {
        $cardholder_name = get_cms_cpf('payment_cardholder_name');
        $card_type = get_cms_cpf('payment_card_type');
        $_card_number = get_cms_cpf('payment_card_number');
        $card_number = ($_card_number === null) ? null : intval($_card_number);
        list($card_start_date_year, $card_start_date_month) = explode('/', get_cms_cpf('payment_card_start_date'));
        list($card_expiry_date_year, $card_expiry_date_month) = explode('/', get_cms_cpf('payment_card_expiry_date'));
        $_card_issue_number = get_cms_cpf('payment_card_issue_number');
        $card_issue_number = ($_card_issue_number === null) ? null : intval($_card_issue_number);
        $card_cv2 = null;

        $billing_street_address = get_cms_cpf('billing_street_address');
        $billing_city = get_cms_cpf('billing_city');
        $billing_county = get_cms_cpf('billing_county');
        $billing_state = get_cms_cpf('billing_state');
        $billing_post_code = get_cms_cpf('billing_post_code');
        $billing_country = get_cms_cpf('billing_country');

        $shipping_firstname = get_cms_cpf('firstname');
        $shipping_lastname = get_cms_cpf('lastname');
        $shipping_street_address = get_cms_cpf('street_address');
        $shipping_city = get_cms_cpf('city');
        $shipping_county = get_cms_cpf('county');
        $shipping_state = get_cms_cpf('state');
        $shipping_post_code = get_cms_cpf('post_code');
        $shipping_country = get_cms_cpf('country');
        $shipping_email = $GLOBALS['FORUM_DRIVER']->get_member_email_address(get_member());
        $shipping_phone = get_cms_cpf('mobile_phone_number');
    }

    $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', array('TITLE' => do_lang_tempcode('PAYMENT_DETAILS'))));

    $fields->attach(form_input_line(do_lang_cpf('payment_cardholder_name'), do_lang_tempcode('DESCRIPTION_CARDHOLDER_NAME'), 'payment_cardholder_name', $cardholder_name, true));
    if (method_exists($payment_gateway_object, 'create_selection_list_card_types')) {
        $fields->attach(form_input_list(do_lang_cpf('payment_card_type'), '', 'payment_card_type', $payment_gateway_object->create_selection_list_card_types($card_type)));
    }
    $fields->attach(form_input_integer(do_lang_cpf('payment_card_number'), do_lang_tempcode('DESCRIPTION_CARD_NUMBER'), 'payment_card_number', $card_number, true, null, 16));
    $fields->attach(form_input_date_components(do_lang_cpf('payment_card_start_date'), do_lang_tempcode('DESCRIPTION_CARD_START_DATE'), 'payment_card_start_date', true, true, false, intval(date('Y')) - 16, intval(date('Y')), $card_start_date_year, $card_start_date_month, null, false));
    $fields->attach(form_input_date_components(do_lang_cpf('payment_card_expiry_date'), do_lang_tempcode('DESCRIPTION_CARD_EXPIRY_DATE'), 'payment_card_expiry_date', true, true, false, intval(date('Y')), intval(date('Y')) + 16, $card_expiry_date_year, $card_expiry_date_month, null, true));
    $fields->attach(form_input_integer(do_lang_cpf('payment_card_issue_number'), do_lang_tempcode('DESCRIPTION_CARD_ISSUE_NUMBER'), 'payment_card_issue_number', $card_issue_number, false));
    $fields->attach(form_input_integer(do_lang_tempcode('CARD_CV2'), do_lang_tempcode('DESCRIPTION_CARD_CV2'), 'payment_card_cv2', $card_cv2, true, null, 4));

    if ((!is_guest()) && (get_forum_type() == 'cns') && (get_option('store_credit_card_numbers') == '1')) {
        $fields->attach(form_input_tick(do_lang_tempcode('SAVE_TO_ACCOUNT'), '', 'payment_save_to_account', get_cms_cpf('payment_cardholder_name') == ''));
    }

    // Billing address fields...

    $fields->attach(get_address_fields('billing_', $billing_street_address, $billing_city, $billing_county, $billing_state, $billing_post_code, $billing_country));

    if ((!is_guest()) && (get_forum_type() == 'cns') && (get_option('store_credit_card_numbers') == '1')) {
        $fields->attach(form_input_tick(do_lang_tempcode('SAVE_TO_ACCOUNT'), '', 'billing_save_to_account', get_cms_cpf('billing_street_address') == ''));
    }

    // Shipping address fields...

    if ($needs_shipping_address) {
        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', array('TITLE' => do_lang_tempcode('SHIPPING_ADDRESS'))));

        $fields->attach(form_input_line(do_lang_cpf('firstname'), '', 'shipping_firstname', $shipping_firstname, true));
        $fields->attach(form_input_line(do_lang_cpf('lastname'), '', 'shipping_lastname', $shipping_lastname, true));
        $fields->attach(get_address_fields('shipping_', $shipping_street_address, $shipping_city, $shipping_county, $shipping_state, $shipping_post_code, $shipping_country));
        $fields->attach(form_input_email(do_lang_tempcode('EMAIL_ADDRESS'), '', 'shipping_email', $shipping_email, true));
        $fields->attach(form_input_line(do_lang_tempcode('PHONE_NUMBER'), '', 'shipping_phone', $shipping_phone, true));

        if ((!is_guest()) && (get_forum_type() == 'cns') && (get_option('store_credit_card_numbers') == '1')) {
            $fields->attach(form_input_tick(do_lang_tempcode('SAVE_TO_ACCOUNT'), '', 'shipping_save_to_account', get_cms_cpf('firstname') == ''));
        }
    }

    // Store transaction ID in hidden field...

    $hidden = new Tempcode();
    $hidden->attach(form_input_hidden('trans_id', $trans_id));

    // ---

    $logos = method_exists($payment_gateway_object, 'get_logos') ? $payment_gateway_object->get_logos() : new Tempcode();
    $payment_processor_links = method_exists($payment_gateway_object, 'get_payment_processor_links') ? $payment_gateway_object->get_payment_processor_links() : new Tempcode();

    require_javascript('shopping');

    return array($fields, $hidden, $logos, $payment_processor_links);
}

/**
 * Get form fields for an address.
 *
 * @param  string $prefix The prefix for the address input field.
 * @param  string $street_address Street address.
 * @param  string $city Town/City.
 * @param  string $county County.
 * @param  string $state State.
 * @param  string $post_code Postcode/Zip.
 * @param  string $country Country.
 * @return Tempcode Address fields
 */
function get_address_fields($prefix, $street_address, $city, $county, $state, $post_code, $country)
{
    $fields = new Tempcode();

    $fields->attach(form_input_text(do_lang_cpf('street_address'), '', $prefix . 'street_address', $street_address, true));

    $fields->attach(form_input_line(do_lang_cpf('city'), '', $prefix . 'city', $city, true));

    if (get_option('cpf_enable_county') == '1') {
        $fields->attach(form_input_line(do_lang_cpf('county'), '', $prefix . 'county', $county, true));
    }

    if (get_option('cpf_enable_state') == '1') {
        $fields->attach(form_input_line(do_lang_cpf('state'), '', $prefix . 'state', $state, true));
    }

    $fields->attach(form_input_line(do_lang_cpf('post_code'), '', $prefix . 'post_code', $post_code, true, null, 12, 'text', null, null, null, 8));

    $countries = new Tempcode();
    $countries->attach(form_input_list_entry('', $country == ''));
    $countries->attach(create_region_selection_list(array($country)));
    $fields->attach(form_input_list(do_lang_cpf('country'), '', $prefix . 'country', $countries, null, false, true));

    return $fields;
}

/**
 * Get a CPF label, for re-use as a general form input label. Remove any CPF name prefixing.
 *
 * @param  ID_TEXT $cpf_name The CPF name.
 * @return string The CPF label
 */
function do_lang_cpf($cpf_name)
{
    require_lang('cns_special_cpf');

    $ret = do_lang('SPECIAL_CPF__cms_' . $cpf_name);
    $ret = preg_replace('#.*: #', '', $ret);
    return $ret;
}

/**
 * Handle a particular local transaction as determined by the POST request.
 *
 * @param  ID_TEXT $payment_gateway The payment gateway
 * @param  object $payment_gateway_object The payment gateway object
 * @return array A triple: success status, formatted status message, raw status message
 */
function do_local_transaction($payment_gateway, $payment_gateway_object)
{
    // Grab transaction details...

    $trans_id = post_param_string('trans_id');

    $trans_expecting_rows = $GLOBALS['SITE_DB']->query_select('trans_expecting', array('*'), array('id' => $trans_id), '', 1);
    if (!array_key_exists(0, $trans_expecting_rows)) {
        warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
    }
    $trans_expecting_row = $trans_expecting_rows[0];

    $purchase_id = $trans_expecting_row['e_purchase_id'];

    $amount = $trans_expecting_row['e_amount'];
    $length = $trans_expecting_row['e_length'];
    $length_units = $trans_expecting_row['e_length_units'];
    $currency = $trans_expecting_row['e_currency'];

    $cardholder_name = post_param_string('payment_cardholder_name');
    $card_type = post_param_string('payment_card_type', '');
    $card_number = post_param_string('payment_card_number');
    $card_start_date = post_param_string('payment_card_start_date_year') . '/' . post_param_string('payment_card_start_date_month');
    $card_expiry_date = post_param_string('payment_card_expiry_date_year') . '/' . post_param_string('payment_card_expiry_date_month');
    $card_issue_number = post_param_integer('payment_card_issue_number', null);
    $card_cv2 = post_param_string('payment_card_cv2');

    // Read billing address

    $billing_street_address = post_param_string('billing_street_address', '');
    $billing_city = post_param_string('billing_city', '');
    $billing_county = post_param_string('billing_county', '');
    $billing_state = post_param_string('billing_state', '');
    $billing_post_code = post_param_string('billing_post_code', '');
    $billing_country = post_param_string('billing_country', '');

    // Save shipping address for order...

    $shipping_firstname = post_param_string('shipping_firstname', '');
    $shipping_lastname = post_param_string('shipping_lastname', '');
    $shipping_street_address = post_param_string('shipping_street_address', '');
    $shipping_city = post_param_string('shipping_city', '');
    $shipping_county = post_param_string('shipping_county', '');
    $shipping_state = post_param_string('shipping_state', '');
    $shipping_post_code = post_param_string('shipping_post_code', '');
    $shipping_country = post_param_string('shipping_country', '');
    $shipping_email = post_param_string('shipping_email', '');
    $shipping_phone = post_param_string('shipping_phone', '');
    if (addon_installed('shopping')) {
        if ($trans_expecting_row['e_type_code'] == 'cart_orders') {
            $shipping_address = array(
                'a_order_id' => intval($purchase_id),
                'a_firstname' => $shipping_firstname,
                'a_lastname' => $shipping_lastname,
                'a_street_address' => $shipping_street_address,
                'a_city' => $shipping_city,
                'a_county' => $shipping_county,
                'a_state' => $shipping_state,
                'a_post_code' => $shipping_post_code,
                'a_country' => $shipping_country,
                'a_email' => $shipping_email,
                'a_phone' => $shipping_phone,
            );
            $GLOBALS['SITE_DB']->query_insert('shopping_order_addresses', $shipping_address, true);
        }
    }

    // Save into CPFs...

    if ((get_param_integer('payment_save_to_account', 0) == 1) && (get_forum_type() == 'cns') && (get_option('store_credit_card_numbers') == '1')) {
        require_code('cns_members_action2');
        $changes = array();
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_payment_cardholder_name'), $cardholder_name, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_payment_card_type'), $card_type, null, true);
        //$changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_payment_card_number'), $card_number, null, true);   PCI rules mean we can't save this without encrypting it and obfuscating when displayed; too onerous to force encryption keys that aren't backed up, so let's save everything but this
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_payment_card_start_date'), $card_start_date, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_payment_card_expiry_date'), $card_expiry_date, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_payment_card_issue_number'), $card_issue_number, null, true);
        if (count($changes) != 0) {
            $GLOBALS['FORUM_DB']->query_update('f_member_custom_fields', $changes, array('mf_member_id' => get_member()), '', 1);
        }
    }

    if ((get_param_integer('billing_save_to_account', 0) == 1) && (get_forum_type() == 'cns') && (get_option('store_credit_card_numbers') == '1')) {
        require_code('cns_members_action2');
        $changes = array();
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_billing_street_address'), $billing_street_address, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_billing_city'), $billing_city, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_billing_county'), $billing_county, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_billing_state'), $billing_state, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_billing_post_code'), $billing_post_code, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_billing_country'), $billing_country, null, true);
        if (count($changes) != 0) {
            $GLOBALS['FORUM_DB']->query_update('f_member_custom_fields', $changes, array('mf_member_id' => get_member()), '', 1);
        }
    }

    if ((get_param_integer('shipping_save_to_account', 0) == 1) && (get_forum_type() == 'cns') && (get_option('store_credit_card_numbers') == '1')) {
        require_code('cns_members_action2');
        $changes = array();
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_firstname'), $shipping_firstname, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_lastname'), $shipping_lastname, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_street_address'), $shipping_street_address, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_city'), $shipping_city, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_county'), $shipping_county, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_state'), $shipping_state, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_post_code'), $shipping_post_code, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_country'), $shipping_country, null, true);
        $changes += cns_set_custom_field(get_member(), find_cms_cpf_field_id('cms_mobile_phone_number'), $shipping_phone, null, true);
        if (count($changes) != 0) {
            $GLOBALS['FORUM_DB']->query_update('f_member_custom_fields', $changes, array('mf_member_id' => get_member()), '', 1);
        }
    }

    // Process order...

    list($success, $message, $message_raw) = $payment_gateway_object->do_local_transaction($trans_id, $cardholder_name, $card_type, $card_number, $card_start_date, $card_expiry_date, $card_issue_number, $card_cv2, $amount, $currency, $billing_street_address, $billing_city, $billing_county, $billing_state, $billing_post_code, $billing_country, $shipping_firstname, $shipping_lastname, $shipping_street_address, $shipping_city, $shipping_county, $shipping_state, $shipping_post_code, $shipping_country, $shipping_email, $shipping_phone, $length, $length_units);

    if (($success) || ($length !== null)) {
        $status = (($length !== null) && (!$success)) ? 'SCancelled' : 'Completed';
        handle_confirmed_transaction($trans_expecting_row['e_purchase_id'], $trans_expecting_row['e_item_name'], $status, $message_raw, '', '', $amount, $currency, $trans_id, '', ($length === null) ? '' : strtolower(strval($length) . ' ' . $length_units), $payment_gateway, get_member(), false, true);
    }

    // Return...

    if (is_numeric($message)) {
        // Not usable
        $message = null;
    }

    return array($success, $message, $message_raw);
}

/**
 * Handle IPN's.
 *
 * @param  boolean $silent_fail Return null on failure rather than showing any error message. Used when not sure a valid & finalised transaction is in the POST environment, but you want to try just in case (e.g. on a redirect back from the gateway).
 * @param  boolean $send_notifications Whether to send notifications. Set to false if this is not the primary payment handling (e.g. a POST redirect rather than the real IPN).
 * @return ?ID_TEXT The ID of the purchase-type (meaning depends on item_name) (null: no transaction; will only return null when not running the 'ecommerce' script)
 */
function handle_ipn_transaction_script($silent_fail = false, $send_notifications = true)
{
    if ((file_exists(get_file_base() . '/data_custom/ecommerce.log')) && (cms_is_writable(get_file_base() . '/data_custom/ecommerce.log'))) {
        $myfile = fopen(get_file_base() . '/data_custom/ecommerce.log', 'ab');
        flock($myfile, LOCK_EX);
        fseek($myfile, 0, SEEK_END);
        fwrite($myfile, serialize($_POST) . "\n");
        fwrite($myfile, serialize($_GET) . "\n");
        fwrite($myfile, "\n\n");
        flock($myfile, LOCK_UN);
        fclose($myfile);
    }

    $payment_gateway = get_param_string('from', get_option('payment_gateway'));
    require_code('hooks/systems/payment_gateway/' . filter_naughty_harsh($payment_gateway));
    $payment_gateway_object = object_factory('Hook_payment_gateway_' . $payment_gateway);

    ob_start();

    $transaction = $payment_gateway_object->handle_ipn_transaction($silent_fail);
    if ($transaction === null) {
        return null;
    }
    list($purchase_id, $item_name, $payment_status, $reason_code, $pending_reason, $memo, $mc_gross, $mc_currency, $txn_id, $parent_txn_id, $period, $member_id) = $transaction;

    $type_code = handle_confirmed_transaction($purchase_id, $item_name, $payment_status, $reason_code, $pending_reason, $memo, $mc_gross, $mc_currency, $txn_id, $parent_txn_id, $period, $payment_gateway, $member_id, $silent_fail, $send_notifications);

    if (method_exists($payment_gateway_object, 'show_payment_response')) {
        echo $payment_gateway_object->show_payment_response($type_code, $purchase_id);
    }

    return $purchase_id;
}

/**
 * Handle IPN's that have been confirmed as backed up by real money.
 * Variables largely emulate PayPal's IPN API.
 *
 * @param  ID_TEXT $purchase_id The ID of the purchase-type (meaning depends on item_name)
 * @param  SHORT_TEXT $item_name The item being purchased (aka the product). One might wonder why we use $item_name instead of $type_code. This is because we pass human-readable-names (hopefully unique!!!) through payment gateways because they are visually shown to the user. (blank: it's a subscription, so look up via a key map across the subscriptions table)
 * @param  ID_TEXT $payment_status The status this transaction is telling of
 * @set    Pending Completed SModified SCancelled
 * @param  SHORT_TEXT $reason_code The code that gives reason to the status
 * @param  SHORT_TEXT $pending_reason The reason it is in pending status (if it is)
 * @param  SHORT_TEXT $memo A note attached to the transaction
 * @param  SHORT_TEXT $mc_gross The amount of money
 * @param  SHORT_TEXT $mc_currency The currency the amount is in
 * @param  SHORT_TEXT $txn_id The transaction ID
 * @param  SHORT_TEXT $parent_txn_id The ID of the parent transaction
 * @param  string $period The subscription period (blank: N/A / unknown: trust is correct on the gateway)
 * @param  ID_TEXT $payment_gateway The payment gateway
 * @param  ?MEMBER $member_id The member who did the transaction [not the same as the member who is recipient of a product] (null: unknown)
 * @param  boolean $silent_fail Return null on failure rather than showing any error message. Used when not sure a valid & finalised transaction is in the POST environment, but you want to try just in case (e.g. on a redirect back from the gateway).
 * @param  boolean $send_notifications Whether to send notifications. Set to false if this is not the primary payment handling (e.g. a POST redirect rather than the real IPN).
 * @return ?ID_TEXT The product purchased (null: no transaction; will only return null when not running the 'ecommerce' script)
 */
function handle_confirmed_transaction($purchase_id, $item_name, $payment_status, $reason_code, $pending_reason, $memo, $mc_gross, $mc_currency, $txn_id, $parent_txn_id, $period, $payment_gateway, $member_id, $silent_fail, $send_notifications)
{
    $is_subscription = ($item_name == '');

    // Try and locate the product
    if ($is_subscription) { // Subscription
        $type_code = $GLOBALS['SITE_DB']->query_select_value_if_there('subscriptions', 's_type_code', array('id' => intval($purchase_id)));
        if ($type_code === null) {
            if ($silent_fail) {
                return null;
            }
            fatal_ipn_exit(do_lang('NO_SUCH_SUBSCRIPTION', $purchase_id));
        }
        $item_name = '_' . $type_code;

        // Find what we sold
        list($found,) = find_product_row($type_code, true, false);
        if ($found !== null) {
            $item_name = $found[4];
        }

        // Check subscription length
        if ($period != '') {
            $length = array_key_exists('length', $found[3]) ? strval($found[3]['length']) : '1';
            $length_units = array_key_exists('length_units', $found[3]) ? $found[3]['length_units'] : 'm';
            if (strtolower($period) != strtolower($length . ' ' . $length_units)) {
                if ($silent_fail) {
                    return null;
                }
                fatal_ipn_exit(do_lang('IPN_SUB_PERIOD_WRONG'));
            }
        }
    } else {
        // Find what we sold
        list($found, $type_code) = find_product_row($item_name, true, true);

        if ($found[0] == PRODUCT_SUBSCRIPTION) {
            exit(); // We ignore separate payment signal for subscriptions (for Paypal it is web_accept)
        }
    }
    if ($found === null) {
        if ($silent_fail) {
            return null;
        }
        fatal_ipn_exit(do_lang('PRODUCT_NO_SUCH') . ' - ' . $item_name, true);
    }

    // Check price, if one defined
    if (($mc_gross != $found[1]) && ($found[1] != '?')) {
        if (($payment_status == 'Completed') && ($payment_gateway != 'manual')) {
            if ($silent_fail) {
                return null;
            }
            fatal_ipn_exit(do_lang('PURCHASE_WRONG_PRICE', $item_name, $mc_gross, $found[1]), $is_subscription);
        }
    }
    $expected_currency = isset($found[5]) ? $found[5] : get_option('currency');
    if ($mc_currency != $expected_currency) {
        if (($payment_status != 'SCancelled') && ($payment_gateway != 'manual')) {
            if ($silent_fail) {
                return null;
            }
            fatal_ipn_exit(do_lang('PURCHASE_WRONG_CURRENCY', $item_name, $mc_currency, $expected_currency));
        }
    }

    // Store
    $GLOBALS['SITE_DB']->query_insert('transactions', array(
        'id' => $txn_id,
        't_memo' => $memo,
        't_type_code' => $type_code,
        't_purchase_id' => $purchase_id,
        't_status' => $payment_status,
        't_pending_reason' => $pending_reason,
        't_reason' => $reason_code,
        't_amount' => $mc_gross,
        't_currency' => $mc_currency,
        't_parent_txn_id' => $parent_txn_id,
        't_time' => time(),
        't_payment_gateway' => $payment_gateway,
    ));

    $found['txn_id'] = $txn_id;

    // Pending
    if ($payment_status == 'Pending') {
        if ($found[0] == PRODUCT_INVOICE) { // Invoices have special support for tracking the order status
            $GLOBALS['SITE_DB']->query_update('invoices', array('i_state' => 'pending'), array('id' => intval($purchase_id)), '', 1);
        } elseif ($found[0] == PRODUCT_SUBSCRIPTION) { // Subscriptions have special support for tracking the order status
            $GLOBALS['SITE_DB']->query_update('subscriptions', array('s_state' => 'pending'), array('id' => intval($purchase_id)), '', 1);
            if ($found[2] != '') {
                call_user_func_array($found[2], array($purchase_id, $found, $type_code, true)); // Run cancel code
            }
        } elseif ((addon_installed('shopping')) && ($item_name == do_lang('shopping:CART_ORDER', $purchase_id))) { // Cart orders have special support for tracking the order status
            $found['ORDER_STATUS'] = 'ORDER_STATUS_awaiting_payment';

            if ($found[2] != '') {
                call_user_func_array($found[2], array($purchase_id, $found, $type_code, $payment_status, $txn_id)); // Set order status
            }
        }

        // Pending transactions stop here
        if ($silent_fail) {
            return null;
        }
        fatal_ipn_exit(do_lang('TRANSACTION_NOT_COMPLETE', $type_code . ':' . $purchase_id, $payment_status), true);
    }

    // Invoice: Check price
    if ($found[0] == PRODUCT_INVOICE) {
        $price = $GLOBALS['SITE_DB']->query_select_value('invoices', 'i_amount', array('id' => intval($purchase_id)));
        if ($price != $mc_gross) {
            if ($payment_gateway != 'manual') {
                if ($silent_fail) {
                    return null;
                }
                fatal_ipn_exit(do_lang('PURCHASE_WRONG_PRICE', $item_name, $mc_gross, $price));
            }
        }
    }

    /*
    At this point we know our transaction is good -- or a subscription cancellation.
    Possible statuses: Completed|SModified|SCancelled
    */

    // Subscription: Completed (Made active)
    if (($payment_status == 'Completed') && ($found[0] == PRODUCT_SUBSCRIPTION)) {
        $GLOBALS['SITE_DB']->query_update('subscriptions', array('s_auto_fund_source' => $payment_gateway, 's_auto_fund_key' => $txn_id, 's_state' => 'active'), array('id' => intval($purchase_id)), '', 1);
    }

    // Subscription: Modified
    if (($payment_status == 'SModified') && ($found[0] == PRODUCT_SUBSCRIPTION)) {
        // No special action needed
    }

    // Subscription: Cancelled
    if (($payment_status == 'SCancelled') && ($found[0] == PRODUCT_SUBSCRIPTION)) {
        $GLOBALS['SITE_DB']->query_update('subscriptions', array('s_auto_fund_source' => $payment_gateway, 's_auto_fund_key' => $txn_id, 's_state' => 'cancelled'), array('id' => intval($purchase_id)), '', 1);
    }

    // Invoice handling
    if (($payment_status == 'Completed') && ($found[0] == PRODUCT_INVOICE)) {
        $GLOBALS['SITE_DB']->query_update('invoices', array('i_state' => 'paid'), array('id' => intval($purchase_id)), '', 1);
    }

    // Set order dispatch status
    if ($payment_status == 'Completed') {
        $product_object = find_product($type_code, true);

        if ((is_object($product_object)) && (!method_exists($product_object, 'get_product_dispatch_type'))) { // If hook does not have dispatch method setting take dispatch method as automatic
            $found['ORDER_STATUS'] = 'ORDER_STATUS_dispatched';
        } elseif (is_object($product_object) && $product_object->get_product_dispatch_type($purchase_id) == 'automatic') {
            $found['ORDER_STATUS'] = 'ORDER_STATUS_dispatched';
        } else {
            $found['ORDER_STATUS'] = 'ORDER_STATUS_payment_received'; // Dispatch has to happen manually still
        }
    }

    // Send payment received notification
    if ($send_notifications) {
        if (($member_id !== null) && (!is_guest($member_id))) {
            require_code('notifications');
            dispatch_notification('payment_received', null, do_lang('PAYMENT_RECEIVED_SUBJECT', $txn_id, null, null, get_lang($member_id)), do_notification_lang('PAYMENT_RECEIVED_BODY', float_format(floatval($mc_gross)), $mc_currency, get_site_name(), get_lang($member_id)), array($member_id), A_FROM_SYSTEM_PRIVILEGED);
        }
    }

    // Dispatch (all product types)
    if ($payment_status != 'SModified') {
        // Call completion/cancellation code
        if ($found[2] != '') {
            call_user_func_array($found[2], array($purchase_id, $found, $type_code, $payment_status, $txn_id));
        }

        // Send out notification to staff for completion/cancellation
        if ($found[0] == PRODUCT_SUBSCRIPTION) {
            require_code('notifications');
            $member_id = $GLOBALS['SITE_DB']->query_select_value_if_there('subscriptions', 's_member_id', array('id' => intval($purchase_id)));
            if ($member_id !== null) {
                $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
                if ($username === null) {
                    $username = do_lang('GUEST');
                }
                if ($send_notifications) {
                    if ($payment_status == 'Completed') { // Completed
                        $subject = do_lang('SERVICE_PAID_FOR', $item_name, $username, get_site_name(), get_site_default_lang());
                        $body = do_notification_lang('_SERVICE_PAID_FOR', $item_name, $username, get_site_name(), get_site_default_lang());
                        dispatch_notification('service_paid_for_staff', null, $subject, $body);
                    } else { // Must be SCancelled
                        $subject = do_lang('SERVICE_CANCELLED', $item_name, $username, get_site_name(), get_site_default_lang());
                        $body = do_notification_lang('_SERVICE_CANCELLED', $item_name, $username, get_site_name(), get_site_default_lang());
                        dispatch_notification('service_cancelled_staff', null, $subject, $body); // NB: subscription_cancelled_staff is for manual cancels, service_cancelled_staff is for automatic cancels
                    }
                }
            }
        }
    }

    return $type_code;
}

/**
 * Exit Composr and write to the error log file.
 *
 * @param  string $error The message.
 * @param  boolean $dont_trigger Dont trigger an error
 * @return mixed Never returns (i.e. exits)
 */
function fatal_ipn_exit($error, $dont_trigger = false)
{
    echo $error . "\n";
    if (!$dont_trigger) {
        trigger_error($error, E_USER_NOTICE);
    }
    exit();
}
