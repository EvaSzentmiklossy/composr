<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 You may not distribute a modified version of this file, unless it is solely as a Composr modification.
 See text/EN/licence.txt for full licencing information.

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    composr_homesite
 */

/* Returns triple: PATH or null if critical error, null or error string if error */
function make_upgrade_get_path($from_version_dotted, $to_version_dotted)
{
    $err = null;

    require_code('version2');
    require_code('composr_homesite');
    require_code('tar');
    require_code('m_zip');
    require_code('files');
    require_code('files2');

    $from_version_pretty = get_version_pretty__from_dotted($from_version_dotted);
    $to_version_pretty = get_version_pretty__from_dotted($to_version_dotted);

    if (str_replace('.', '', $from_version_dotted) == '') {
        $err = 'Source version not entered correctly.';
        return array(null, $err);
    }

    if ($from_version_dotted == '..') {
        warn_exit(do_lang_tempcode('NO_PARAMETER_SENT', 'from version'));
    }
    if ($to_version_dotted == '..') {
        warn_exit(do_lang_tempcode('NO_PARAMETER_SENT', 'to version'));
    }

    if ($from_version_dotted == $to_version_dotted) {
        $err = 'Put in the version number you are upgrading <strong>from</strong>, not to. Then a specialised upgrade file will be generated for you.';
        return array(null, $err);
    }

    if (php_function_allowed('set_time_limit')) {
        @set_time_limit(0);
    }

    // Find out path/filenames for the upgrade file we're making
    $filename = $from_version_dotted . '-' . $to_version_dotted . '.cms';
    $tar_path = get_file_base() . '/uploads/website_specific/compo.sr/upgrades/tars/' . $filename;
    $wip_path = get_file_base() . '/uploads/website_specific/compo.sr/upgrades/tar_build/' . $filename;

    // Find out paths for the directories holding untarred full manual installers
    $old_base_path = get_file_base() . '/uploads/website_specific/compo.sr/upgrades/full/' . $from_version_dotted;
    $new_base_path = get_file_base() . '/uploads/website_specific/compo.sr/upgrades/full/' . $to_version_dotted;

    // Find corresponding download rows
    $old_download_row = ($from_version_dotted == '') ? null : find_version_download($from_version_pretty);
    if ($old_download_row === null) {
        $err = escape_html('Version ' . $from_version_pretty . ' is not recognised');
        return array(null, $err);
    }
    $new_download_row = find_version_download($to_version_pretty);
    if ($new_download_row === null) {
        return array(null, escape_html('Could not find version ' . $to_version_pretty . ' in the download database'));
    }
    $mtime = $new_download_row['add_date'];
    if ($new_download_row['edit_date'] !== null) {
        $mtime = $new_download_row['edit_date'];
    }
    $mtime_disk = filemtime(get_file_base() . '/' . rawurldecode($new_download_row['url']));
    if ($mtime_disk > $mtime) {
        $mtime = $mtime_disk;
    }

    // Exists already
    if (file_exists($tar_path)) {
        if (filemtime($tar_path) > $mtime) {
            return array($tar_path, $err);
        } else { // Outdated
            unlink($tar_path);

            @deldir_contents($new_base_path);
            @deldir_contents($old_base_path);
            @rmdir($new_base_path);
            @rmdir($old_base_path);
        }
    }

    // Stop a race-condition
    if ((file_exists($old_base_path)) || (file_exists($new_base_path)) || (file_exists($wip_path))) {
        return array(null, 'An upgrade is currently being generated by another user. Please try again in a minute.');
    }

    // Unzip old
    if ($old_download_row !== null) {
        @mkdir($old_base_path, 0777);
        if (!url_is_local($old_download_row['url'])) {
            return array(null, escape_html('Non-local URL found (' . $old_download_row['url'] . '). Unexpected.'));
        }
        recursive_unzip(get_file_base() . '/' . rawurldecode($old_download_row['url']), $old_base_path);
    }

    // Unzip new
    @mkdir($new_base_path, 0777);
    if (!url_is_local($new_download_row['url'])) {
        return array(null, escape_html('Non-local URL found (' . $new_download_row['url'] . '). Unexpected.'));
    }
    recursive_unzip(get_file_base() . '/' . rawurldecode($new_download_row['url']), $new_base_path);

    // Make actual upgrader
    @mkdir($wip_path, 0777);
    make_upgrader_do_dir($wip_path, $new_base_path, $old_base_path);
    @copy($old_base_path . '/data/files.dat', $wip_path . '/data/files_previous.dat');
    fix_permissions($wip_path . '/data/files_previous.dat');
    $log_file = fopen(get_file_base() . '/uploads/website_specific/compo.sr/upgrades/tarring.log', 'wb');
    flock($log_file, LOCK_EX);
    $tar_handle = tar_open($tar_path . '.new', 'wb');
    tar_add_folder($tar_handle, $log_file, $wip_path, null, '', null, null, false, true);
    tar_close($tar_handle);
    flock($log_file, LOCK_UN);
    fclose($log_file);
    @rename($tar_path . '.new', $tar_path);
    sync_file($tar_path);

    // Clean up
    @deldir_contents($wip_path);
    @rmdir($wip_path);

    return array($tar_path, $err);
}

function make_upgrader_do_dir($build_path, $new_base_path, $old_base_path, $dir = '', $pretend_dir = '')
{
    require_code('files');

    $dh = opendir($new_base_path . '/' . $dir);
    while (($file = readdir($dh)) !== false) {
        $is_dir = is_dir($new_base_path . '/' . $dir . $file);

        if (should_ignore_file($pretend_dir . $file, IGNORE_NONBUNDLED_SCATTERED | IGNORE_CUSTOM_DIR_SUPPLIED_CONTENTS | IGNORE_CUSTOM_DIR_GROWN_CONTENTS | IGNORE_CUSTOM_ZONES | IGNORE_CUSTOM_THEMES | IGNORE_NON_EN_SCATTERED_LANGS | IGNORE_BUNDLED_VOLATILE | IGNORE_BUNDLED_UNSHIPPED_VOLATILE, 0)) {
            continue;
        }

        if ($is_dir) {
            @mkdir($build_path . '/' . $pretend_dir . $file, 0777);
            make_upgrader_do_dir($build_path, $new_base_path, $old_base_path, $dir . $file . '/', $pretend_dir . $file . '/');

            // If it's empty still, delete it
            @rmdir($build_path . '/' . $pretend_dir . $file);
        } else {
            $contents = cms_file_get_contents_safe($new_base_path . '/' . $dir . $file);
            if ((strpos($dir, '/addon_registry') !== false) || (!file_exists($old_base_path . '/' . $pretend_dir . '/' . $file)) || (unixify_line_format($contents) != unixify_line_format(cms_file_get_contents_safe($old_base_path . '/' . $pretend_dir . '/' . $file)))) {
                copy($new_base_path . '/' . $dir . $file, $build_path . '/' . $pretend_dir . $file);
                fix_permissions($build_path . '/' . $pretend_dir . $file);
                touch($build_path . '/' . $pretend_dir . $file, filemtime($new_base_path . '/' . $dir . $file));
            }
        }
    }
}
